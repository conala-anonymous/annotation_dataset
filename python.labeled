[
    {
        "question_id": 3061761, 
        "title": "Numpy array dimensions", 
        "annotations": [
            {
                "intent": "Numpy array dimensions", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " a.shape\n", 
                "normalized_code_snippet": "a.shape"
            }, 
            {
                "intent": "Numpy array dimensions", 
                "context": "import numpy as N    \n", 
                "normalized_context": "import numpy as N", 
                "code_snippet": " N.shape(a)\n", 
                "normalized_code_snippet": "N.shape(a)"
            }, 
            {
                "intent": "Numpy array dimensions", 
                "context": " a = [[1,2],[1,2]]\n", 
                "normalized_context": "a = [[1, 2], [1, 2]]", 
                "code_snippet": " N.shape(a)\n", 
                "normalized_code_snippet": "N.shape(a)"
            }, 
            {
                "intent": "Numpy array dimensions", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "In [5]: a.shape\nOut[5]: (2, 2)  # both the first and second axis have 2 (columns/rows/pages/blocks/...) data\n", 
                "normalized_code_snippet": "a.shape"
            }
        ]
    }, 
    {
        "question_id": 379906, 
        "title": "Parse String to Float or Int", 
        "annotations": [
            {
                "intent": "Parse String to Float or Int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " float(a)\n", 
                "normalized_code_snippet": "float(a)"
            }, 
            {
                "intent": "Parse String to Float or Int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    try:\n        return int(s)\n    except ValueError:\n        return float(s)\n", 
                "normalized_code_snippet": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)"
            }
        ]
    }, 
    {
        "question_id": 3437059, 
        "title": "Does Python have a string contains substring method?", 
        "annotations": [
            {
                "intent": "string contains substring", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if \"blah\" not in somestring: \n    ", 
                "normalized_code_snippet": "if ('blah' not in somestring):\n    pass"
            }, 
            {
                "intent": "string contains substring", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if needle in haystack:", 
                "normalized_code_snippet": "if (needle in haystack):\n    pass"
            }, 
            {
                "intent": "string contains substring", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "string.find(\"substring\")", 
                "normalized_code_snippet": "string.find('substring')"
            }, 
            {
                "intent": "string contains substring method", 
                "context": "s = \"This be a string\"\n", 
                "normalized_context": "s = 'This be a string'", 
                "code_snippet": "\nif s.find(\"is\") == -1:\n    print \"No 'is' here!\"\nelse:\n    print \"Found 'is' in the string.\"\n", 
                "normalized_code_snippet": "if (s.find('is') == (-1)):\n    print \"No 'is' here!\"\nelse:\n    print \"Found 'is' in the string.\""
            }
        ]
    }, 
    {
        "question_id": 4265988, 
        "title": "Generate random numbers with a given (numerical) distribution", 
        "annotations": [
            {
                "intent": "Generate random numbers with a given (numerical) distribution", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])\n", 
                "normalized_code_snippet": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
            }
        ]
    }, 
    {
        "question_id": 6886493, 
        "title": "Get all object attributes in Python?", 
        "annotations": [
            {
                "intent": "Get all object attributes", 
                "context": "\n\nobj = MyObj()\n", 
                "normalized_context": "obj = MyObj()", 
                "code_snippet": "\nprint(obj.__dict__)\n\n", 
                "normalized_code_snippet": "print(obj.__dict__)"
            }, 
            {
                "intent": "Get all object attributes", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "dir()", 
                "normalized_code_snippet": "dir()"
            }, 
            {
                "intent": "Get all object attributes", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "dir()", 
                "normalized_code_snippet": "dir()"
            }
        ]
    }, 
    {
        "question_id": 843277, 
        "title": "How do I check if a variable exists?", 
        "annotations": [
            {
                "intent": "check if a variable exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'myVar' in locals()", 
                "normalized_code_snippet": "('myVar' in locals())"
            }, 
            {
                "intent": "check if a variable exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'myVar' in globals()", 
                "normalized_code_snippet": "('myVar' in globals())"
            }, 
            {
                "intent": "check if a variable exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " hasattr(obj, 'attr_name')", 
                "normalized_code_snippet": "hasattr(obj, 'attr_name')"
            }, 
            {
                "intent": "check if a variable exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if 'myVar' in locals():\n  ", 
                "normalized_code_snippet": "if ('myVar' in locals()):\n    pass"
            }, 
            {
                "intent": "check if a variable exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if 'myVar' in globals():\n  ", 
                "normalized_code_snippet": "if ('myVar' in globals()):\n    pass"
            }
        ]
    }, 
    {
        "question_id": 546321, 
        "title": "How do I calculate the date six months from the current date using the datetime Python module?", 
        "annotations": [
            {
                "intent": "How do I calculate the date six months from the current date", 
                "context": "from datetime import date\n\n\nfrom dateutil.relativedelta import relativedelta\n\n", 
                "normalized_context": "from datetime import date\nfrom dateutil.relativedelta import relativedelta", 
                "code_snippet": "\n\nsix_months = date.today() + relativedelta(months=+6)\n", 
                "normalized_code_snippet": "six_months = (date.today() + relativedelta(months=(+ 6)))"
            }, 
            {
                "intent": "How do I calculate the date six months from the current date", 
                "context": "from datetime import date\nfrom dateutil.relativedelta import relativedelta\n\n", 
                "normalized_context": "from datetime import date\nfrom dateutil.relativedelta import relativedelta", 
                "code_snippet": " date(2010,12,31)+relativedelta(months=+1)\n  ", 
                "normalized_code_snippet": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"
            }, 
            {
                "intent": "How do I calculate the date six months from the current date", 
                "context": "from datetime import date\nfrom dateutil.relativedelta import relativedelta\n\n", 
                "normalized_context": "from datetime import date\nfrom dateutil.relativedelta import relativedelta", 
                "code_snippet": " date(2010,12,31)+relativedelta(months=+2)\n  ", 
                "normalized_code_snippet": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"
            }, 
            {
                "intent": "calculate the date six months from the current date", 
                "context": "import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": "\nprint (datetime.date.today() + datetime.timedelta(6*365/12)).isoformat()\n", 
                "normalized_code_snippet": "print (datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat()"
            }
        ]
    }, 
    {
        "question_id": 237079, 
        "title": "How to get file creation & modification date/times in Python?", 
        "annotations": [
            {
                "intent": "get file creation & modification date/times in", 
                "context": "import os.path, time\n", 
                "normalized_context": "import os.path, time", 
                "code_snippet": " time.ctime(os.path.getmtime(file))\n", 
                "normalized_code_snippet": "time.ctime(os.path.getmtime(file))"
            }, 
            {
                "intent": "get file creation & modification date/times in", 
                "context": "import os.path, time\n", 
                "normalized_context": "import os.path, time", 
                "code_snippet": " time.ctime(os.path.getctime(file))\n", 
                "normalized_code_snippet": "time.ctime(os.path.getctime(file))"
            }, 
            {
                "intent": "get file creation & modification date/times in", 
                "context": "import os\nimport datetime\n", 
                "normalized_context": "import os\nimport datetime", 
                "code_snippet": "\n    t = os.path.getmtime(filename)\n    ", 
                "normalized_code_snippet": "t = os.path.getmtime(filename)"
            }, 
            {
                "intent": "get file creation & modification date/times in", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.path.getmtime(path)", 
                "normalized_code_snippet": "os.path.getmtime(path)"
            }, 
            {
                "intent": "get file creation & modification date/times in", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nprint \"last modified: %s\" % time.ctime(os.path.getmtime(file))\n", 
                "normalized_code_snippet": "print ('last modified: %s' % time.ctime(os.path.getmtime(file)))"
            }, 
            {
                "intent": "get file creation & modification date/times in", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nprint \"created: %s\" % time.ctime(os.path.getctime(file))\n", 
                "normalized_code_snippet": "print ('created: %s' % time.ctime(os.path.getctime(file)))"
            }, 
            {
                "intent": "get file creation & modification date/times in", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n        return os.path.getctime(path_to_file)\n    ", 
                "normalized_code_snippet": "return os.path.getctime(path_to_file)"
            }
        ]
    }, 
    {
        "question_id": 6159900, 
        "title": "Correct way to write line to file in Python", 
        "annotations": [
            {
                "intent": "write line to file", 
                "context": "from __future__ import print_function\n", 
                "normalized_context": "from __future__ import print_function", 
                "code_snippet": "\nprint(\"hi there\", file=f)\n", 
                "normalized_code_snippet": "print('hi there', file=f)"
            }, 
            {
                "intent": "write line to file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "f = open('myfile','w')\n\n\nf.write('hi there\\n') \n\nf.close() ", 
                "normalized_code_snippet": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()"
            }, 
            {
                "intent": "write line to file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": ">>> with open('somefile.txt', 'a') as the_file:\n...     the_file.write('Hello\\n')\n", 
                "normalized_code_snippet": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')"
            }
        ]
    }, 
    {
        "question_id": 899103, 
        "title": "Writing a list to a file with Python", 
        "annotations": [
            {
                "intent": "Writing a list to a file with Python", 
                "context": "thefile = open('test.txt', 'w')", 
                "normalized_context": "thefile = open('test.txt', 'w')", 
                "code_snippet": "for item in thelist:\n  thefile.write(\"%s\\n\" % item)\n", 
                "normalized_code_snippet": "for item in thelist:\n    thefile.write(('%s\\n' % item))"
            }, 
            {
                "intent": "Writing a list to a file with Python", 
                "context": "thefile = open('test.txt', 'w')", 
                "normalized_context": "thefile = open('test.txt', 'w')", 
                "code_snippet": "for item in thelist:\n  print>>thefile, item\n", 
                "normalized_code_snippet": "for item in thelist:\n    pass"
            }, 
            {
                "intent": "Writing a list to a file with Python", 
                "context": "import pickle\n\n", 
                "normalized_context": "import pickle", 
                "code_snippet": "\n\npickle.dump(itemlist, outfile)\n", 
                "normalized_code_snippet": "pickle.dump(itemlist, outfile)"
            }, 
            {
                "intent": "Writing a list to a file with Python", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "outfile.write(\"\\n\".join(itemlist))\n", 
                "normalized_code_snippet": "outfile.write('\\n'.join(itemlist))"
            }
        ]
    }, 
    {
        "question_id": 3939361, 
        "title": "Remove specific characters from a string in python", 
        "annotations": [
            {
                "intent": "Remove specific characters from a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " line.translate(None, '!@#$')\n", 
                "normalized_code_snippet": "line.translate(None, '!@#$')"
            }, 
            {
                "intent": "Remove specific characters from a string", 
                "context": "import re\n", 
                "normalized_context": "import re", 
                "code_snippet": "\nline = re.sub('[!@#$]', '', line)\n", 
                "normalized_code_snippet": "line = re.sub('[!@#$]', '', line)"
            }, 
            {
                "intent": "Remove specific characters from a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " string.replace(\"1\",\"\")\n", 
                "normalized_code_snippet": "string.replace('1', '')"
            }, 
            {
                "intent": "Remove specific characters from a string", 
                "context": " a = \"a!b@c#d$\"\n", 
                "normalized_context": "a = 'a!b@c#d$'", 
                "code_snippet": "     a = a.replace(char,\"\")\n", 
                "normalized_code_snippet": "a = a.replace(char, '')"
            }, 
            {
                "intent": "Remove specific characters from a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " for char in b:\n...     a = a.replace(char,\"\")\n", 
                "normalized_code_snippet": "a = a.replace(char, '')"
            }, 
            {
                "intent": "Remove specific characters from a string", 
                "context": "import string\n", 
                "normalized_context": "import string", 
                "code_snippet": "\nline = line.translate(string.maketrans('', ''), '!@#$')\n", 
                "normalized_code_snippet": "line = line.translate(string.maketrans('', ''), '!@#$')"
            }
        ]
    }, 
    {
        "question_id": 9001509, 
        "title": "How can I sort a dictionary by key?", 
        "annotations": [
            {
                "intent": "sort a dictionary by key", 
                "context": " d = {2:3, 1:89, 4:5, 3:0}\n\n", 
                "normalized_context": "d = {2: 3, 1: 89, 4: 5, 3: 0, }", 
                "code_snippet": " od = collections.OrderedDict(sorted(d.items()))\n\n", 
                "normalized_code_snippet": "od = collections.OrderedDict(sorted(d.items()))"
            }, 
            {
                "intent": "sort a dictionary by key", 
                "context": " from collections import OrderedDict\n\n\n d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n\n", 
                "normalized_context": "from collections import OrderedDict\nd = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2, }", 
                "code_snippet": " OrderedDict(sorted(d.items(), key=lambda t: t[0]))\n", 
                "normalized_code_snippet": "OrderedDict(sorted(d.items(), key=(lambda t: t[0])))"
            }
        ]
    }, 
    {
        "question_id": 2990121, 
        "title": "How do I loop through a Python list by twos?", 
        "annotations": [
            {
                "intent": "loop through a Python list by twos", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for i in xrange(0,10,2):\n  print(i)\n", 
                "normalized_code_snippet": "for i in xrange(0, 10, 2):\n    pass"
            }, 
            {
                "intent": "loop through a Python list by twos", 
                "context": "mylist = [1,2,3,4,5,6,7,8,9,10]\n", 
                "normalized_context": "mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", 
                "code_snippet": "\nfor i in mylist[::2]:\n    print i", 
                "normalized_code_snippet": "for i in mylist[::2]:\n    pass"
            }
        ]
    }, 
    {
        "question_id": 26443308, 
        "title": "Find last occurrence of character in string Python", 
        "annotations": [
            {
                "intent": "Find last occurrence of character", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " \"abcd}def}\".rfind('}')\n", 
                "normalized_code_snippet": "'abcd}def}'.rfind('}')"
            }
        ]
    }, 
    {
        "question_id": 4174941, 
        "title": "How to sort a list of lists by a specific index of the inner list?", 
        "annotations": [
            {
                "intent": "sort a list of lists by a specific index of the inner list", 
                "context": " from operator import itemgetter\n\n L=[[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\n", 
                "normalized_context": "from operator import itemgetter\nL = [[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]", 
                "code_snippet": " sorted(L, key=itemgetter(2))\n", 
                "normalized_code_snippet": "sorted(L, key=itemgetter(2))"
            }, 
            {
                "intent": "sort a list of lists by a specific index of the inner list", 
                "context": " l = [[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\n", 
                "normalized_context": "l = [[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]", 
                "code_snippet": " l.sort(key=lambda x: x[2])\n", 
                "normalized_code_snippet": "l.sort(key=(lambda x: x[2]))"
            }, 
            {
                "intent": "sort a list of lists by a specific index", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " sorted(l, key=lambda x: x[2])\n", 
                "normalized_code_snippet": "sorted(l, key=(lambda x: x[2]))"
            }, 
            {
                "intent": "sort a list of lists by a specific index", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "sorted_list = sorted(list_to_sort, key=itemgetter(2,0,1))\n", 
                "normalized_code_snippet": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))"
            }
        ]
    }, 
    {
        "question_id": 3207219, 
        "title": "How to list all files of a directory in Python", 
        "annotations": [
            {
                "intent": "list all files of a directory", 
                "context": "from os import listdir\nfrom os.path import isfile, join\n", 
                "normalized_context": "from os import listdir\nfrom os.path import isfile, join", 
                "code_snippet": "\nonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n", 
                "normalized_code_snippet": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
            }, 
            {
                "intent": "list all files of a directory", 
                "context": "from os import walk\n\n", 
                "normalized_context": "from os import walk", 
                "code_snippet": "\n\nf = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break\n", 
                "normalized_code_snippet": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break"
            }, 
            {
                "intent": "list all files of a directory", 
                "context": "import glob\n", 
                "normalized_context": "import glob", 
                "code_snippet": "\nprint glob.glob(\"/home/adam/*.txt\")\n", 
                "normalized_code_snippet": "print glob.glob('/home/adam/*.txt')"
            }, 
            {
                "intent": "list all files of a directory", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": "\nos.listdir(\"somedirectory\")\n", 
                "normalized_code_snippet": "os.listdir('somedirectory')"
            }
        ]
    }, 
    {
        "question_id": 2972212, 
        "title": "Creating an empty list in Python", 
        "annotations": [
            {
                "intent": "Creating an empty list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "l=[]", 
                "normalized_code_snippet": "l = []"
            }, 
            {
                "intent": "Creating an empty list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "l=list()", 
                "normalized_code_snippet": "l = list()"
            }, 
            {
                "intent": "Creating an empty list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "list()", 
                "normalized_code_snippet": "list()"
            }, 
            {
                "intent": "Creating an empty list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "[]", 
                "normalized_code_snippet": "[]"
            }
        ]
    }, 
    {
        "question_id": 3964681, 
        "title": "Find all files in directory with extension .txt in Python", 
        "annotations": [
            {
                "intent": "Find all files in directory with extension .txt", 
                "context": "import glob, os\n", 
                "normalized_context": "import glob, os", 
                "code_snippet": "\nos.chdir(\"/mydir\")\nfor file in glob.glob(\"*.txt\"):\n    print(file)\n", 
                "normalized_code_snippet": "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"
            }, 
            {
                "intent": "Find all files in directory with extension .txt", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": "\nfor file in os.listdir(\"/mydir\"):\n    if file.endswith(\".txt\"):\n        print(file)\n", 
                "normalized_code_snippet": "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"
            }, 
            {
                "intent": "Find all files in directory with extension .txt", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": "\nfor root, dirs, files in os.walk(\"/mydir\"):\n    for file in files:\n        if file.endswith(\".txt\"):\n             print(os.path.join(root, file))\n", 
                "normalized_code_snippet": "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"
            }
        ]
    }, 
    {
        "question_id": 1514553, 
        "title": "How to declare an array in Python?", 
        "annotations": [
            {
                "intent": "declare an array", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "variable = []\n", 
                "normalized_code_snippet": "variable = []"
            }, 
            {
                "intent": "declare an array", 
                "context": "from array import array\n", 
                "normalized_context": "from array import array", 
                "code_snippet": "\nintarray = array('i')\n", 
                "normalized_code_snippet": "intarray = array('i')"
            }
        ]
    }, 
    {
        "question_id": 21887754, 
        "title": "numpy concatenate two arrays vertically", 
        "annotations": [
            {
                "intent": "numpy concatenate two arrays vertically", 
                "context": "a = np.array([[1,5,9],[2,6,10]])\nb = np.array([[3,7,11],[4,8,12]])\n", 
                "normalized_context": "a = np.array([[1, 5, 9], [2, 6, 10]])\nb = np.array([[3, 7, 11], [4, 8, 12]])", 
                "code_snippet": "print concatenate((a,b),axis=0)\n", 
                "normalized_code_snippet": "print concatenate((a, b), axis=0)"
            }, 
            {
                "intent": "numpy concatenate two arrays vertically", 
                "context": "a = np.array([[1,5,9],[2,6,10]])\nb = np.array([[3,7,11],[4,8,12]])\n", 
                "normalized_context": "a = np.array([[1, 5, 9], [2, 6, 10]])\nb = np.array([[3, 7, 11], [4, 8, 12]])", 
                "code_snippet": "print concatenate((a,b),axis=1)\n", 
                "normalized_code_snippet": "print concatenate((a, b), axis=1)"
            }, 
            {
                "intent": "numpy concatenate two arrays vertically", 
                "context": "import numpy as np\na = np.array([1,2,3])\nb = np.array([4,5,6])\n", 
                "normalized_context": "import numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])", 
                "code_snippet": "\nc = np.r_[a[None,:],b[None,:]]\n", 
                "normalized_code_snippet": "c = np.r_[(a[None, :], b[None, :])]"
            }, 
            {
                "intent": "numpy concatenate two arrays vertically", 
                "context": "a = np.array([1,2,3])\nb = np.array([4,5,6])\n", 
                "normalized_context": "a = np.array([1, 2, 3])\nb = np.array([4, 5, 6])", 
                "code_snippet": "\nnp.array((a,b))\n", 
                "normalized_code_snippet": "np.array((a, b))"
            }
        ]
    }, 
    {
        "question_id": 13571134, 
        "title": "How to recursively go through all subdirectories and read files?", 
        "annotations": [
            {
                "intent": "recursively go through all subdirectories and read files", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    for root, subFolders, files in os.walk(rootdir):\n        ", 
                "normalized_code_snippet": "for (root, subFolders, files) in os.walk(rootdir):\n    pass"
            }
        ]
    }, 
    {
        "question_id": 2612802, 
        "title": "How to clone or copy a list?", 
        "annotations": [
            {
                "intent": "copy a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "new_list = old_list[:]\n", 
                "normalized_code_snippet": "new_list = old_list[:]"
            }, 
            {
                "intent": "copy a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "new_list = list(old_list)\n", 
                "normalized_code_snippet": "new_list = list(old_list)"
            }, 
            {
                "intent": "copy a list", 
                "context": "import copy\n", 
                "normalized_context": "import copy", 
                "code_snippet": "\nnew_list = copy.copy(old_list)\n", 
                "normalized_code_snippet": "new_list = copy.copy(old_list)"
            }, 
            {
                "intent": "copy a list", 
                "context": "import copy\n", 
                "normalized_context": "import copy", 
                "code_snippet": "\nnew_list = copy.deepcopy(old_list)\n", 
                "normalized_code_snippet": "new_list = copy.deepcopy(old_list)"
            }, 
            {
                "intent": "copy a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "[i for i in old_list]", 
                "normalized_code_snippet": "[i for i in old_list]"
            }
        ]
    }, 
    {
        "question_id": 610883, 
        "title": "How to know if an object has an attribute in Python", 
        "annotations": [
            {
                "intent": "know if an object has an attribute", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if hasattr(a, 'property'):\n    ", 
                "normalized_code_snippet": "if hasattr(a, 'property'):\n    pass"
            }, 
            {
                "intent": "know if an object has an attribute", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if hasattr(a, 'property'):\n    ", 
                "normalized_code_snippet": "if hasattr(a, 'property'):\n    pass"
            }, 
            {
                "intent": "know if an object has an attribute", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "getattr(a, 'property', 'default value')\n", 
                "normalized_code_snippet": "getattr(a, 'property', 'default value')"
            }
        ]
    }, 
    {
        "question_id": 402504, 
        "title": "How to determine the variable type in Python?", 
        "annotations": [
            {
                "intent": "determine the variable type", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " type(i)\n", 
                "normalized_code_snippet": "type(i)"
            }, 
            {
                "intent": "determine the variable type", 
                "context": " v = 10\n", 
                "normalized_context": "v = 10", 
                "code_snippet": " type(v)\n", 
                "normalized_code_snippet": "type(v)"
            }, 
            {
                "intent": "determine the variable type", 
                "context": " v = 100000000000000\n", 
                "normalized_context": "v = 100000000000000", 
                "code_snippet": " type(v)\n", 
                "normalized_code_snippet": "type(v)"
            }, 
            {
                "intent": "determine the variable type", 
                "context": " v = -10\n", 
                "normalized_context": "v = (-10)", 
                "code_snippet": " type(v)\n", 
                "normalized_code_snippet": "type(v)"
            }, 
            {
                "intent": "determine the variable type", 
                "context": " v = 'hi'\n", 
                "normalized_context": "v = 'hi'", 
                "code_snippet": " type(v)\n", 
                "normalized_code_snippet": "type(v)"
            }, 
            {
                "intent": "determine the variable type", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "print type(variable_name)\n", 
                "normalized_code_snippet": "print type(variable_name)"
            }
        ]
    }, 
    {
        "question_id": 275018, 
        "title": "How can I remove (chomp) a newline in Python?", 
        "annotations": [
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'test string\\n'.rstrip()\n", 
                "normalized_code_snippet": "'test string\\n'.rstrip()"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'test string \\n\\n'.rstrip('\\n')\n", 
                "normalized_code_snippet": "'test string \\n\\n'.rstrip('\\n')"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " s.strip()\n", 
                "normalized_code_snippet": "s.strip()"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " s.rstrip()\n", 
                "normalized_code_snippet": "s.rstrip()"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " s.lstrip()\n", 
                "normalized_code_snippet": "s.lstrip()"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'Mac EOL\\r'.rstrip('\\r\\n')\n", 
                "normalized_code_snippet": "'Mac EOL\\r'.rstrip('\\r\\n')"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'Windows EOL\\r\\n'.rstrip('\\r\\n')\n", 
                "normalized_code_snippet": "'Windows EOL\\r\\n'.rstrip('\\r\\n')"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'Unix EOL\\n'.rstrip('\\r\\n')\n", 
                "normalized_code_snippet": "'Unix EOL\\n'.rstrip('\\r\\n')"
            }, 
            {
                "intent": "remove (chomp) a newline", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " \"Hello\\n\\n\\n\".rstrip(\"\\n\")\n", 
                "normalized_code_snippet": "'Hello\\n\\n\\n'.rstrip('\\n')"
            }
        ]
    }, 
    {
        "question_id": 364621, 
        "title": "How to get item's position in a list?", 
        "annotations": [
            {
                "intent": "get item's position in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " [i for i,x in enumerate(testlist) if x == 1]\n", 
                "normalized_code_snippet": "[i for (i, x) in enumerate(testlist) if (x == 1)]"
            }, 
            {
                "intent": "get item's position in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n>>> [i for i,x in enumerate(testlist) if x == 1]\n", 
                "normalized_code_snippet": "[i for (i, x) in enumerate(testlist) if (x == 1)]"
            }, 
            {
                "intent": "get item's position in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": ">>> for i in [i for i,x in enumerate(testlist) if x == 1]:\n...     print i\n", 
                "normalized_code_snippet": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass"
            }, 
            {
                "intent": "get item's position in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n>>> for i in (i for i,x in enumerate(testlist) if x == 1):\n...     print i\n", 
                "normalized_code_snippet": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass"
            }, 
            {
                "intent": "get item's position in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": ">>> gen = (i for i,x in enumerate(testlist) if x == 1)\n>>> for i in gen: print i\n", 
                "normalized_code_snippet": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass"
            }, 
            {
                "intent": "get item's position in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "print testlist.index(element)\n", 
                "normalized_code_snippet": "print testlist.index(element)"
            }, 
            {
                "intent": "get item's position in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "try:\n    print testlist.index(element)\nexcept ValueError:\n    pass\n", 
                "normalized_code_snippet": "try:\n    print testlist.index(element)\nexcept ValueError:\n    pass"
            }
        ]
    }, 
    {
        "question_id": 952914, 
        "title": "Making a flat list out of list of lists in Python", 
        "annotations": [
            {
                "intent": "Making a flat list out of list of lists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "[item for sublist in l for item in sublist]\n", 
                "normalized_code_snippet": "[item for sublist in l for item in sublist]"
            }, 
            {
                "intent": "Making a flat list out of list of lists", 
                "context": " import itertools\n\n list2d = [[1,2,3],[4,5,6], [7], [8,9]]\n", 
                "normalized_context": "import itertools\nlist2d = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]", 
                "code_snippet": " list(itertools.chain(*list2d))\n", 
                "normalized_code_snippet": "list(itertools.chain(*list2d))"
            }, 
            {
                "intent": "Making a flat list out of list of lists", 
                "context": "import itertools\nlist2d = [[1,2,3],[4,5,6], [7], [8,9]]", 
                "normalized_context": "import itertools\nlist2d = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]", 
                "code_snippet": "list(itertools.chain.from_iterable(list2d))", 
                "normalized_code_snippet": "list(itertools.chain.from_iterable(list2d))"
            }
        ]
    }, 
    {
        "question_id": 276052, 
        "title": "How to get current CPU and RAM usage in Python?", 
        "annotations": [
            {
                "intent": "get current CPU and RAM usage", 
                "context": "\nimport psutil\n", 
                "normalized_context": "import psutil", 
                "code_snippet": "psutil.cpu_percent()\npsutil.virtual_memory()", 
                "normalized_code_snippet": "psutil.cpu_percent()\npsutil.virtual_memory()"
            }, 
            {
                "intent": "get current CPU and RAM usage", 
                "context": "import os\nimport psutil\n", 
                "normalized_context": "import os\nimport psutil", 
                "code_snippet": "\npid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = py.memory_info()[0]/2.**30  ", 
                "normalized_code_snippet": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))"
            }, 
            {
                "intent": "get current CPU and RAM usage", 
                "context": "from __future__ import print_function\nimport psutil\n", 
                "normalized_context": "from __future__ import print_function\nimport psutil", 
                "code_snippet": "\nprint(psutil.cpu_percent())\nprint(psutil.virtual_memory()) #  physical memory usage\n", 
                "normalized_code_snippet": "print(psutil.cpu_percent())\nprint(psutil.virtual_memory())"
            }
        ]
    }, 
    {
        "question_id": 5137497, 
        "title": "Find current directory and file's directory", 
        "annotations": [
            {
                "intent": "Find current directory and file's directory", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": " os.getcwd()\n", 
                "normalized_code_snippet": "os.getcwd()"
            }, 
            {
                "intent": "Find current directory and file's directory", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " os.path.realpath(__file__)\n", 
                "normalized_code_snippet": "os.path.realpath(__file__)"
            }, 
            {
                "intent": "Find current directory and file's directory", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.path.dirname(path)", 
                "normalized_code_snippet": "os.path.dirname(path)"
            }, 
            {
                "intent": "Find current directory and file's directory", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.path.realpath(path)", 
                "normalized_code_snippet": "os.path.realpath(path)"
            }, 
            {
                "intent": "Find current directory", 
                "context": "import os \n", 
                "normalized_context": "import os", 
                "code_snippet": " \ndir_path = os.path.dirname(os.path.realpath(__file__))\n", 
                "normalized_code_snippet": "dir_path = os.path.dirname(os.path.realpath(__file__))"
            }, 
            {
                "intent": "Find current directory", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": "\ncwd = os.getcwd()\n", 
                "normalized_code_snippet": "cwd = os.getcwd()"
            }, 
            {
                "intent": "Find current directory", 
                "context": "import os\n\n", 
                "normalized_context": "import os", 
                "code_snippet": "\nfull_path = os.path.realpath(__file__)\n", 
                "normalized_code_snippet": "full_path = os.path.realpath(__file__)"
            }
        ]
    }, 
    {
        "question_id": 930397, 
        "title": "Getting the last element of a list in Python", 
        "annotations": [
            {
                "intent": "Getting the last element of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "some_list[-1]", 
                "normalized_code_snippet": "some_list[(-1)]"
            }, 
            {
                "intent": "Getting the last element of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " some_list[-2] ", 
                "normalized_code_snippet": "some_list[(-2)]"
            }, 
            {
                "intent": "gets the nth-to-last element", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "some_list[-n]", 
                "normalized_code_snippet": "some_list[(- n)]"
            }, 
            {
                "intent": "Getting the last element of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nalist[-1]   ", 
                "normalized_code_snippet": "alist[(-1)]"
            }, 
            {
                "intent": "Getting the last element of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nastr[-1]    ", 
                "normalized_code_snippet": "astr[(-1)]"
            }
        ]
    }, 
    {
        "question_id": 961632, 
        "title": "Converting integer to string in Python?", 
        "annotations": [
            {
                "intent": "Converting integer to string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "str(i)\n", 
                "normalized_code_snippet": "str(i)"
            }, 
            {
                "intent": "Converting integer to string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "a.__str__()\n", 
                "normalized_code_snippet": "a.__str__()"
            }, 
            {
                "intent": "Converting integer to string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "str(a)\n", 
                "normalized_code_snippet": "str(a)"
            }
        ]
    }, 
    {
        "question_id": 1712227, 
        "title": "How to get the size of a list", 
        "annotations": [
            {
                "intent": "get the size of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "len(items)\n", 
                "normalized_code_snippet": "len(items)"
            }, 
            {
                "intent": "get the size of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " len([1,2,3])\n", 
                "normalized_code_snippet": "len([1, 2, 3])"
            }, 
            {
                "intent": "get the size of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "items.__len__()\n", 
                "normalized_code_snippet": "items.__len__()"
            }, 
            {
                "intent": "get the size of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "len()", 
                "normalized_code_snippet": "len()"
            }, 
            {
                "intent": "get the size of a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "len(s)", 
                "normalized_code_snippet": "len(s)"
            }
        ]
    }, 
    {
        "question_id": 1720421, 
        "title": "How to append list to second list (concatenate lists)", 
        "annotations": [
            {
                "intent": "concatenate lists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " listone + listtwo\n", 
                "normalized_code_snippet": "(listone + listtwo)"
            }, 
            {
                "intent": "concatenate lists", 
                "context": "import itertools\n", 
                "normalized_context": "import itertools", 
                "code_snippet": "\nfor item in itertools.chain(listone, listtwo):\n   ", 
                "normalized_code_snippet": "for item in itertools.chain(listone, listtwo):\n    pass"
            }
        ]
    }, 
    {
        "question_id": 16196712, 
        "title": "python to wait for shell command to complete", 
        "annotations": [
            {
                "intent": "wait for shell command to complete", 
                "context": "p = subprocess.Popen(['unrar', 'e', '%s/%s' % (root, i), testfolder],\n        bufsize=2048, stdin=subprocess.PIPE)\np.stdin.write('e')\n", 
                "normalized_context": "p = subprocess.Popen(['unrar', 'e', ('%s/%s' % (root, i)), testfolder], bufsize=2048, stdin=subprocess.PIPE)\np.stdin.write('e')", 
                "code_snippet": "\np.wait()\n", 
                "normalized_code_snippet": "p.wait()"
            }
        ]
    }, 
    {
        "question_id": 209513, 
        "title": "Convert hex string to int in Python", 
        "annotations": [
            {
                "intent": "Convert hex string to int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int(\"deadbeef\", 16)\n", 
                "normalized_code_snippet": "int('deadbeef', 16)"
            }, 
            {
                "intent": "Convert hex string to int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int(\"a\", 16)\n", 
                "normalized_code_snippet": "int('a', 16)"
            }, 
            {
                "intent": "Convert hex string to int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int(\"0xa\",16)\n", 
                "normalized_code_snippet": "int('0xa', 16)"
            }, 
            {
                "intent": "Convert hex string to int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "int(s, 16)\n", 
                "normalized_code_snippet": "int(s, 16)"
            }, 
            {
                "intent": "Convert hex string to int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "int(hexString, 16)", 
                "normalized_code_snippet": "int(hexString, 16)"
            }
        ]
    }, 
    {
        "question_id": 642154, 
        "title": "How to convert strings into integers in Python?", 
        "annotations": [
            {
                "intent": "convert strings into integers", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int(\"1\") ", 
                "normalized_code_snippet": "int('1')"
            }, 
            {
                "intent": "convert strings into integers", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "int()", 
                "normalized_code_snippet": "int()"
            }, 
            {
                "intent": "convert strings into integers", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "T2 = [map(int, x) for x in T1]\n", 
                "normalized_code_snippet": "T2 = [map(int, x) for x in T1]"
            }
        ]
    }, 
    {
        "question_id": 7961363, 
        "title": "Removing duplicates in lists", 
        "annotations": [
            {
                "intent": "Removing duplicates in lists", 
                "context": " t = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n", 
                "normalized_context": "t = [1, 2, 3, 1, 2, 5, 6, 7, 8]", 
                "code_snippet": " list(set(t))\n", 
                "normalized_code_snippet": "list(set(t))"
            }, 
            {
                "intent": "Removing duplicates in lists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "list(set(source_list))", 
                "normalized_code_snippet": "list(set(source_list))"
            }, 
            {
                "intent": "Removing duplicates in lists", 
                "context": " from collections import OrderedDict\n", 
                "normalized_context": "from collections import OrderedDict", 
                "code_snippet": " list(OrderedDict.fromkeys('abracadabra'))\n", 
                "normalized_code_snippet": "list(OrderedDict.fromkeys('abracadabra'))"
            }
        ]
    }, 
    {
        "question_id": 2269827, 
        "title": "How to convert an int to a hex string?", 
        "annotations": [
            {
                "intent": "convert an int to a hex string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " hex(65)\n", 
                "normalized_code_snippet": "hex(65)"
            }
        ]
    }, 
    {
        "question_id": 6996603, 
        "title": "Delete a file or folder in Python", 
        "annotations": [
            {
                "intent": "Delete a file or folder", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.rmdir()", 
                "normalized_code_snippet": "os.rmdir()"
            }, 
            {
                "intent": "Delete a file or folder", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "shutil.rmtree(path, ignore_errors=False, onerror=None)\n", 
                "normalized_code_snippet": "shutil.rmtree(path, ignore_errors=False, onerror=None)"
            }, 
            {
                "intent": "Delete a file or folder", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.removedirs(name)\n", 
                "normalized_code_snippet": "os.removedirs(name)"
            }
        ]
    }, 
    {
        "question_id": 663171, 
        "title": "Is there a way to substring a string in Python?", 
        "annotations": [
            {
                "intent": "get a new string from the 3rd character to the end of the string", 
                "context": ">>> x = \"Hello World!\"\n", 
                "normalized_context": "x = 'Hello World!'", 
                "code_snippet": "\n>>> x[2:]\n", 
                "normalized_code_snippet": "x[2:]"
            }, 
            {
                "intent": "substring a string", 
                "context": ">>> x = \"Hello World!\"\n", 
                "normalized_context": "x = 'Hello World!'", 
                "code_snippet": "\n>>> x[:2]\n", 
                "normalized_code_snippet": "x[:2]"
            }, 
            {
                "intent": "substring a string", 
                "context": ">>> x = \"Hello World!\"\n", 
                "normalized_context": "x = 'Hello World!'", 
                "code_snippet": "\n>>> x[:-2]\n", 
                "normalized_code_snippet": "x[:(-2)]"
            }, 
            {
                "intent": "substring a string", 
                "context": ">>> x = \"Hello World!\"\n", 
                "normalized_context": "x = 'Hello World!'", 
                "code_snippet": "\n>>> x[-2:]\n", 
                "normalized_code_snippet": "x[(-2):]"
            }, 
            {
                "intent": "substring a string", 
                "context": ">>> x = \"Hello World!\"\n", 
                "normalized_context": "x = 'Hello World!'", 
                "code_snippet": "\n>>> x[2:-2]\n", 
                "normalized_code_snippet": "x[2:(-2)]"
            }, 
            {
                "intent": "reversing a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "some_string[::-1]\n", 
                "normalized_code_snippet": "some_string[::(-1)]"
            }, 
            {
                "intent": "selecting alternate characters", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\"H-e-l-l-o- -W-o-r-l-d\"[::2] ", 
                "normalized_code_snippet": "'H-e-l-l-o- -W-o-r-l-d'[::2]"
            }, 
            {
                "intent": "substring a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "s = s[ beginning : beginning + LENGTH]\n", 
                "normalized_code_snippet": "s = s[beginning:(beginning + LENGTH)]"
            }
        ]
    }, 
    {
        "question_id": 9257094, 
        "title": "How to change a string into uppercase", 
        "annotations": [
            {
                "intent": "change a string into uppercase", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " s.upper()\n", 
                "normalized_code_snippet": "s.upper()"
            }
        ]
    }, 
    {
        "question_id": 730764, 
        "title": "Try/Except in Python: How do you properly ignore Exceptions?", 
        "annotations": [
            {
                "intent": "do a try-except without handling the exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "try:\n  doSomething()\nexcept: \n  pass\n", 
                "normalized_code_snippet": "try:\n    doSomething()\nexcept:\n    pass"
            }, 
            {
                "intent": "do a try-except without handling the exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "try:\n  doSomething()\nexcept Exception: \n  pass\n", 
                "normalized_code_snippet": "try:\n    doSomething()\nexcept Exception:\n    pass"
            }
        ]
    }, 
    {
        "question_id": 70797, 
        "title": "Python: user input and commandline arguments", 
        "annotations": [
            {
                "intent": "user input and commandline arguments", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "var = raw_input(\"Please enter something: \")\n", 
                "normalized_code_snippet": "var = raw_input('Please enter something: ')"
            }
        ]
    }, 
    {
        "question_id": 4706499, 
        "title": "How do you append to a file in Python?", 
        "annotations": [
            {
                "intent": "append to a file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "with open(\"test.txt\", \"a\") as myfile:\n    myfile.write(\"appended text\")\n", 
                "normalized_code_snippet": "with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')"
            }, 
            {
                "intent": "append to a file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "with open(\"foo\", \"a\") as f:\n    f.write(\"cool beans...\")\n", 
                "normalized_code_snippet": "with open('foo', 'a') as f:\n    f.write('cool beans...')"
            }, 
            {
                "intent": "append to a file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n>>> with open('test1','ab') as f:\n        f.write('koko')\n", 
                "normalized_code_snippet": "with open('test1', 'ab') as f:\n    pass"
            }, 
            {
                "intent": "append to a file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " open(\"test\",\"a+b\").write(\"koko\")\n", 
                "normalized_code_snippet": "open('test', 'a+b').write('koko')"
            }
        ]
    }, 
    {
        "question_id": 22676, 
        "title": "How do I download a file over HTTP using Python?", 
        "annotations": [
            {
                "intent": "download a file over HTTP", 
                "context": "import urllib\n", 
                "normalized_context": "import urllib", 
                "code_snippet": "\nurllib.urlretrieve (\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")\n", 
                "normalized_code_snippet": "urllib.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"
            }, 
            {
                "intent": "download a file over HTTP", 
                "context": "import urllib2\n\nurl = \"http://download.thinkbroadband.com/10MB.zip\"\n\nfile_name = url.split('/')[-1]\n", 
                "normalized_context": "import urllib2\nurl = 'http://download.thinkbroadband.com/10MB.zip'\nfile_name = url.split('/')[(-1)]", 
                "code_snippet": "\nu = urllib2.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders(\"Content-Length\")[0])\nprint \"Downloading: %s Bytes: %s\" % (file_name, file_size)\n\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if not buffer:\n        break\n\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = r\"%10d  [%3.2f%%]\" % (file_size_dl, file_size_dl * 100. / file_size)\n    status = status + chr(8)*(len(status)+1)\n    print status,\n\nf.close()\n", 
                "normalized_code_snippet": "u = urllib2.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint ('Downloading: %s Bytes: %s' % (file_name, file_size))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print status,\nf.close()"
            }, 
            {
                "intent": "download a file over HTTP", 
                "context": "import urllib2\n", 
                "normalized_context": "import urllib2", 
                "code_snippet": "\nresponse = urllib2.urlopen('http://www.example.com/')\nhtml = response.read()\n", 
                "normalized_code_snippet": "response = urllib2.urlopen('http://www.example.com/')\nhtml = response.read()"
            }, 
            {
                "intent": "download a file over HTTP", 
                "context": ">>> import requests\n>>> \n>>> url = \"http://download.thinkbroadband.com/10MB.zip\"\n", 
                "normalized_context": "import requests\nurl = 'http://download.thinkbroadband.com/10MB.zip'", 
                "code_snippet": "\n>>> r = requests.get(url)\n", 
                "normalized_code_snippet": "r = requests.get(url)"
            }, 
            {
                "intent": "download a file over HTTP", 
                "context": "from tqdm import tqdm\nimport requests\n\nurl = \"http://download.thinkbroadband.com/10MB.zip\"\n", 
                "normalized_context": "from tqdm import tqdm\nimport requests\nurl = 'http://download.thinkbroadband.com/10MB.zip'", 
                "code_snippet": "\nresponse = requests.get(url, stream=True)\n\nwith open(\"10MB\", \"wb\") as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)\n", 
                "normalized_code_snippet": "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"
            }
        ]
    }, 
    {
        "question_id": 11709079, 
        "title": "Parsing HTML using Python", 
        "annotations": [
            {
                "intent": "Parsing HTML", 
                "context": "try: \n    from BeautifulSoup import BeautifulSoup\nexcept ImportError:\n    from bs4 import BeautifulSoup\n", 
                "normalized_context": "try:\n    from BeautifulSoup import BeautifulSoup\nexcept ImportError:\n    from bs4 import BeautifulSoup", 
                "code_snippet": "\nparsed_html = BeautifulSoup(html)\nprint parsed_html.body.find('div', attrs={'class':'container'}).text\n", 
                "normalized_code_snippet": "parsed_html = BeautifulSoup(html)\nprint parsed_html.body.find('div', attrs={'class': 'container', }).text"
            }, 
            {
                "intent": "Parsing HTML", 
                "context": "import urllib2\nfrom BeautifulSoup import BeautifulSoup\n\n", 
                "normalized_context": "import urllib2\nfrom BeautifulSoup import BeautifulSoup", 
                "code_snippet": "\n\npage = urllib2.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)\n\n", 
                "normalized_code_snippet": "page = urllib2.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"
            }
        ]
    }, 
    {
        "question_id": 739993, 
        "title": "How can I get a list of locally installed Python modules?", 
        "annotations": [
            {
                "intent": "get a list of locally installed Python modules", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "help('modules')\n", 
                "normalized_code_snippet": "help('modules')"
            }
        ]
    }, 
    {
        "question_id": 9210525, 
        "title": "How do I convert hex to decimal in Python?", 
        "annotations": [
            {
                "intent": "convert hex to decimal", 
                "context": "s = \"6a48f82d8e828ce82b82\"\n", 
                "normalized_context": "s = '6a48f82d8e828ce82b82'", 
                "code_snippet": "i = int(s, 16)\n", 
                "normalized_code_snippet": "i = int(s, 16)"
            }, 
            {
                "intent": "convert hex to decimal", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int(\"0xff\", 16)\n", 
                "normalized_code_snippet": "int('0xff', 16)"
            }, 
            {
                "intent": "convert hex to decimal", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int(\"FFFF\", 16)\n", 
                "normalized_code_snippet": "int('FFFF', 16)"
            }, 
            {
                "intent": "convert hex to decimal", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " ast.literal_eval('0xdeadbeef')\n", 
                "normalized_code_snippet": "ast.literal_eval('0xdeadbeef')"
            }, 
            {
                "intent": "convert hex to decimal", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int('deadbeef', 16)\n", 
                "normalized_code_snippet": "int('deadbeef', 16)"
            }
        ]
    }, 
    {
        "question_id": 6797984, 
        "title": "How to convert string to lowercase in Python?", 
        "annotations": [
            {
                "intent": "convert string to lowercase", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "s.lower()", 
                "normalized_code_snippet": "s.lower()"
            }, 
            {
                "intent": "convert string to lowercase", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " s.decode('utf-8').lower()\n", 
                "normalized_code_snippet": "s.decode('utf-8').lower()"
            }
        ]
    }, 
    {
        "question_id": 1207457, 
        "title": "Convert a Unicode string to a string in Python (containing extra symbols)", 
        "annotations": [
            {
                "intent": "Convert a Unicode string to a string", 
                "context": "title = u\"Kl\u00fcft skr\u00e4ms inf\u00f6r p\u00e5 f\u00e9d\u00e9ral \u00e9lectoral gro\u00dfe\"\n\n\nimport unicodedata\n", 
                "normalized_context": "title = u'Kl\\xfcft skr\\xe4ms inf\\xf6r p\\xe5 f\\xe9d\\xe9ral \\xe9lectoral gro\\xdfe'\nimport unicodedata", 
                "code_snippet": "\nunicodedata.normalize('NFKD', title).encode('ascii','ignore')\n", 
                "normalized_code_snippet": "unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')"
            }, 
            {
                "intent": "Convert a Unicode string to a string", 
                "context": " a=u\"aaa\u00e0\u00e7\u00e7\u00e7\u00f1\u00f1\u00f1\"\n", 
                "normalized_context": "a = u'aaa\\xe0\\xe7\\xe7\\xe7\\xf1\\xf1\\xf1'", 
                "code_snippet": " a.encode('ascii','ignore')\n", 
                "normalized_code_snippet": "a.encode('ascii', 'ignore')"
            }
        ]
    }, 
    {
        "question_id": 3294889, 
        "title": "Iterating over dictionaries using for loops in Python", 
        "annotations": [
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for key, value in d.iteritems():\n", 
                "normalized_code_snippet": "for (key, value) in d.iteritems():\n    pass"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for key, value in d.items():\n", 
                "normalized_code_snippet": "for (key, value) in d.items():\n    pass"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for letter, number in d.items():\n    ", 
                "normalized_code_snippet": "for (letter, number) in d.items():\n    pass"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for k,v in d.items():\n    ", 
                "normalized_code_snippet": "for (k, v) in d.items():\n    pass"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " d.items()\n", 
                "normalized_code_snippet": "d.items()"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "list(d.items())", 
                "normalized_code_snippet": "list(d.items())"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for k,v in d.items():\n    print k, 'corresponds to', v\n", 
                "normalized_code_snippet": "for (k, v) in d.items():\n    pass"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for letter, number in d.items():\n    print letter, 'corresponds to', number\n", 
                "normalized_code_snippet": "for (letter, number) in d.items():\n    pass"
            }, 
            {
                "intent": "Iterating over dictionaries using for loops", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for letter, number in d.items():\n    print '{0} corresponds to {1}'.format(letter, number)\n", 
                "normalized_code_snippet": "for (letter, number) in d.items():\n    pass"
            }
        ]
    }, 
    {
        "question_id": 7571635, 
        "title": "Fastest way to check if a value exist in a list", 
        "annotations": [
            {
                "intent": "check if a value exist in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "7 in a\n", 
                "normalized_code_snippet": "(7 in a)"
            }, 
            {
                "intent": "check if a value exist in a list", 
                "context": "a = [1,2,3,4,'a','b','c']\n", 
                "normalized_context": "a = [1, 2, 3, 4, 'a', 'b', 'c']", 
                "code_snippet": " 'a' in a\n", 
                "normalized_code_snippet": "('a' in a)"
            }
        ]
    }, 
    {
        "question_id": 1093322, 
        "title": "How do I check what version of Python is running my script?", 
        "annotations": [
            {
                "intent": "check what version of Python is running", 
                "context": " import sys\n", 
                "normalized_context": "import sys", 
                "code_snippet": "sys.version", 
                "normalized_code_snippet": "sys.version"
            }, 
            {
                "intent": "check what version of Python is running", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " sys.version_info\n", 
                "normalized_code_snippet": "sys.version_info"
            }
        ]
    }, 
    {
        "question_id": 5618878, 
        "title": "How to convert list to string", 
        "annotations": [
            {
                "intent": "convert list to string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nstr1 = ''.join(list1)\n", 
                "normalized_code_snippet": "str1 = ''.join(list1)"
            }, 
            {
                "intent": "convert list to string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " \" \".join(str(x) for x in L)\n", 
                "normalized_code_snippet": "' '.join((str(x) for x in L))"
            }, 
            {
                "intent": "convert list to string", 
                "context": "list1 = [1, 2, 3]\n", 
                "normalized_context": "list1 = [1, 2, 3]", 
                "code_snippet": "\nstr1 = ''.join(str(e) for e in list1)\n", 
                "normalized_code_snippet": "str1 = ''.join((str(e) for e in list1))"
            }, 
            {
                "intent": "convert list to string", 
                "context": "L = ['L','O','L']\n", 
                "normalized_context": "L = ['L', 'O', 'L']", 
                "code_snippet": "\nmakeitastring = ''.join(map(str, L))\n", 
                "normalized_code_snippet": "makeitastring = ''.join(map(str, L))"
            }
        ]
    }, 
    {
        "question_id": 3277503, 
        "title": "How to read a file line by line into a list with Python", 
        "annotations": [
            {
                "intent": "read a file line by line into a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "with open(fname) as f:\n    content = f.readlines()\n", 
                "normalized_code_snippet": "with open(fname) as f:\n    content = f.readlines()"
            }, 
            {
                "intent": "read a file line by line into a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "with open('filename') as f:\n    lines = f.readlines()\n", 
                "normalized_code_snippet": "with open('filename') as f:\n    lines = f.readlines()"
            }, 
            {
                "intent": "read a file line by line into a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "lines = [line.rstrip('\\n') for line in open('filename')]\n", 
                "normalized_code_snippet": "lines = [line.rstrip('\\n') for line in open('filename')]"
            }, 
            {
                "intent": "read a file line by line into a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "with open(\"file.txt\", \"r\") as ins:\n    array = []\n    for line in ins:\n        array.append(line)\n", 
                "normalized_code_snippet": "with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)"
            }
        ]
    }, 
    {
        "question_id": 5844672, 
        "title": "Delete an element from a dictionary", 
        "annotations": [
            {
                "intent": "Delete an element from a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "del d[key]\n", 
                "normalized_code_snippet": "del d[key]"
            }, 
            {
                "intent": "Delete an element from a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n>>> {i:a[i] for i in a if i!=0}\n", 
                "normalized_code_snippet": "{i: a[i] for i in a if (i != 0)}"
            }, 
            {
                "intent": "Delete an element from a dictionary", 
                "context": " >>>lol = {\"hello\":\"gdbye\"}\n ", 
                "normalized_context": "lol = {'hello': 'gdbye', }", 
                "code_snippet": "\n >>>lol.pop(\"hello\")\n    ", 
                "normalized_code_snippet": "lol.pop('hello')"
            }, 
            {
                "intent": "Delete an element from a dictionary", 
                "context": "\n    r = dict(d)\n    ", 
                "normalized_context": "r = dict(d)", 
                "code_snippet": "\n    del r[key]\n    ", 
                "normalized_code_snippet": "del r[key]"
            }
        ]
    }, 
    {
        "question_id": 1400608, 
        "title": "How to empty a list in Python?", 
        "annotations": [
            {
                "intent": "empty a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "del lst[:]\n", 
                "normalized_code_snippet": "del lst[:]"
            }, 
            {
                "intent": "empty a list", 
                "context": "lst1 = [1, 2, 3]\n", 
                "normalized_context": "lst1 = [1, 2, 3]", 
                "code_snippet": "\ndel lst1[:]\n", 
                "normalized_code_snippet": "del lst1[:]"
            }, 
            {
                "intent": "empty a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "lst[:] = []\n", 
                "normalized_code_snippet": "lst[:] = []"
            }, 
            {
                "intent": "empty a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "alist[:] = []\n", 
                "normalized_code_snippet": "alist[:] = []"
            }
        ]
    }, 
    {
        "question_id": 16296643, 
        "title": "Convert tuple to list and back", 
        "annotations": [
            {
                "intent": "Convert tuple to list", 
                "context": " t = ('my', 'name', 'is', 'mr', 'tuple')\n", 
                "normalized_context": "t = ('my', 'name', 'is', 'mr', 'tuple')", 
                "code_snippet": " list(t)\n", 
                "normalized_code_snippet": "list(t)"
            }, 
            {
                "intent": "Convert tuple to list", 
                "context": " l = ['my', 'name', 'is', 'mr', 'list']\n", 
                "normalized_context": "l = ['my', 'name', 'is', 'mr', 'list']", 
                "code_snippet": " tuple(l)\n", 
                "normalized_code_snippet": "tuple(l)"
            }, 
            {
                "intent": "Convert tuple to list and back", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "level1 = map(list, level1)\n", 
                "normalized_code_snippet": "level1 = map(list, level1)"
            }
        ]
    }, 
    {
        "question_id": 4004550, 
        "title": "Converting string series to float list in python", 
        "annotations": [
            {
                "intent": "Converting string series to float list", 
                "context": "s = '5.2 5.6 5.3'\n", 
                "normalized_context": "s = '5.2 5.6 5.3'", 
                "code_snippet": "\nfloats = [float(x) for x in s.split()]\n", 
                "normalized_code_snippet": "floats = [float(x) for x in s.split()]"
            }, 
            {
                "intent": "Converting string series to float list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "floats = map(float, s.split())\n", 
                "normalized_code_snippet": "floats = map(float, s.split())"
            }
        ]
    }, 
    {
        "question_id": 10543303, 
        "title": "number of values in a list greater than a certain number", 
        "annotations": [
            {
                "intent": "number of values in a list greater than a certain number", 
                "context": " j = [4, 5, 6, 7, 1, 3, 7, 5]\n", 
                "normalized_context": "j = [4, 5, 6, 7, 1, 3, 7, 5]", 
                "code_snippet": " sum(i > 5 for i in j)\n", 
                "normalized_code_snippet": "sum(((i > 5) for i in j))"
            }, 
            {
                "intent": "number of values in a list greater than a certain number", 
                "context": " j = [4, 5, 6, 7, 1, 3, 7, 5]\n", 
                "normalized_context": "j = [4, 5, 6, 7, 1, 3, 7, 5]", 
                "code_snippet": " len([1 for i in j if i > 5])\n", 
                "normalized_code_snippet": "len([1 for i in j if (i > 5)])"
            }, 
            {
                "intent": "number of values in a list greater than a certain number", 
                "context": "import numpy as np\n", 
                "normalized_context": "import numpy as np", 
                "code_snippet": "\nj = np.array(j)\nsum(j > i)\n", 
                "normalized_code_snippet": "j = np.array(j)\nsum((j > i))"
            }
        ]
    }, 
    {
        "question_id": 674764, 
        "title": "Examples for string find in Python", 
        "annotations": [
            {
                "intent": "string find", 
                "context": " x = \"Hello World\"\n", 
                "normalized_context": "x = 'Hello World'", 
                "code_snippet": " x.find('World')\n", 
                "normalized_code_snippet": "x.find('World')"
            }, 
            {
                "intent": "string find", 
                "context": " x = \"Hello World\"\n", 
                "normalized_context": "x = 'Hello World'", 
                "code_snippet": " x.find('Aloha')", 
                "normalized_code_snippet": "x.find('Aloha')"
            }, 
            {
                "intent": "string find", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'sdfasdf'.index('cc')\n", 
                "normalized_code_snippet": "'sdfasdf'.index('cc')"
            }, 
            {
                "intent": "string find", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'sdfasdf'.index('df')\n", 
                "normalized_code_snippet": "'sdfasdf'.index('df')"
            }, 
            {
                "intent": "string find", 
                "context": "str = \"abcdefioshgoihgs sijsiojs \"", 
                "normalized_context": "str = 'abcdefioshgoihgs sijsiojs '", 
                "code_snippet": "str.find('a')", 
                "normalized_code_snippet": "str.find('a')"
            }, 
            {
                "intent": "string find", 
                "context": "str = \"abcdefioshgoihgs sijsiojs \"", 
                "normalized_context": "str = 'abcdefioshgoihgs sijsiojs '", 
                "code_snippet": "str.find('g')", 
                "normalized_code_snippet": "str.find('g')"
            }, 
            {
                "intent": "string find", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "str.find('s',11)", 
                "normalized_code_snippet": "str.find('s', 11)"
            }, 
            {
                "intent": "string find", 
                "context": "str = \"abcdefioshgoihgs sijsiojs \"", 
                "normalized_context": "str = 'abcdefioshgoihgs sijsiojs '", 
                "code_snippet": "str.find('s',15)", 
                "normalized_code_snippet": "str.find('s', 15)"
            }, 
            {
                "intent": "string find", 
                "context": "str = \"abcdefioshgoihgs sijsiojs \"", 
                "normalized_context": "str = 'abcdefioshgoihgs sijsiojs '", 
                "code_snippet": "str.find('s',16)", 
                "normalized_code_snippet": "str.find('s', 16)"
            }, 
            {
                "intent": "string find", 
                "context": "str = \"abcdefioshgoihgs sijsiojs \"", 
                "normalized_context": "str = 'abcdefioshgoihgs sijsiojs '", 
                "code_snippet": "str.find('s',11,14)", 
                "normalized_code_snippet": "str.find('s', 11, 14)"
            }
        ]
    }, 
    {
        "question_id": 432842, 
        "title": "How do you get the logical xor of two variables in Python?", 
        "annotations": [
            {
                "intent": "get the logical xor of two variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "bool(a) != bool(b)\n", 
                "normalized_code_snippet": "(bool(a) != bool(b))"
            }, 
            {
                "intent": "get the logical xor of two variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "(a and not b) or (not a and b)\n", 
                "normalized_code_snippet": "((a and (not b)) or ((not a) and b))"
            }, 
            {
                "intent": "get the logical xor of two variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "bool(a) ^ bool(b)\n", 
                "normalized_code_snippet": "(bool(a) ^ bool(b))"
            }, 
            {
                "intent": "get the logical xor of two variables", 
                "context": "from operator import xor\n", 
                "normalized_context": "from operator import xor", 
                "code_snippet": "\nxor(bool(a), bool(b))\n", 
                "normalized_code_snippet": "xor(bool(a), bool(b))"
            }, 
            {
                "intent": "get the logical xor of two variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    return bool(str1) ^ bool(str2)\n", 
                "normalized_code_snippet": "return (bool(str1) ^ bool(str2))"
            }
        ]
    }, 
    {
        "question_id": 1303243, 
        "title": "How to find out if a Python object is a string?", 
        "annotations": [
            {
                "intent": "find out if a Python object is a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "isinstance(obj, basestring)", 
                "normalized_code_snippet": "isinstance(obj, basestring)"
            }, 
            {
                "intent": "find out if a Python object is a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "isinstance(o, basestring)\n", 
                "normalized_code_snippet": "isinstance(o, basestring)"
            }, 
            {
                "intent": "find out if a Python object is a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "type(o) is str\n", 
                "normalized_code_snippet": "(type(o) is str)"
            }, 
            {
                "intent": "find out if a Python object is a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "isinstance(o, str)\n", 
                "normalized_code_snippet": "isinstance(o, str)"
            }, 
            {
                "intent": "find out if a Python object is a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "isinstance(obj_to_test, str)\n", 
                "normalized_code_snippet": "isinstance(obj_to_test, str)"
            }
        ]
    }, 
    {
        "question_id": 163542, 
        "title": "Python - How do I pass a string into subprocess.Popen (using the stdin argument)?", 
        "annotations": [
            {
                "intent": "pass a string into subprocess.Popen", 
                "context": "from subprocess import Popen, PIPE, STDOUT\n\n", 
                "normalized_context": "from subprocess import Popen, PIPE, STDOUT", 
                "code_snippet": "\n\np = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    \ngrep_stdout = p.communicate(input=b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]\n", 
                "normalized_code_snippet": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"
            }, 
            {
                "intent": "pass a string into subprocess.Popen", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " p = subprocess.Popen(['grep','f'],stdout=subprocess.PIPE,stdin=subprocess.PIPE)\n\n p.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\n\n p.communicate()[0]\n\n p.stdin.close()\n", 
                "normalized_code_snippet": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"
            }
        ]
    }, 
    {
        "question_id": 4383571, 
        "title": "Importing files from different folder in Python", 
        "annotations": [
            {
                "intent": "Importing files from different folder", 
                "context": "\nimport sys\n", 
                "normalized_context": "import sys", 
                "code_snippet": "\nsys.path.insert(0, '/path/to/application/app/folder')\n\nimport file\n", 
                "normalized_code_snippet": "sys.path.insert(0, '/path/to/application/app/folder')\nimport file"
            }
        ]
    }, 
    {
        "question_id": 11801309, 
        "title": "How to loop over files with Python?", 
        "annotations": [
            {
                "intent": "loop over files", 
                "context": "import os  \n", 
                "normalized_context": "import os", 
                "code_snippet": "  \nfor fn in os.listdir('.'):\n     if os.path.isfile(fn):\n        print (fn)\n", 
                "normalized_code_snippet": "for fn in os.listdir('.'):\n    if os.path.isfile(fn):\n        pass"
            }, 
            {
                "intent": "loop over files", 
                "context": "source = '/home/test/py_test/'\n", 
                "normalized_context": "source = '/home/test/py_test/'", 
                "code_snippet": "\nfor root, dirs, filenames in os.walk(source):\n    for f in filenames:\n        print f\n        ", 
                "normalized_code_snippet": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass"
            }
        ]
    }, 
    {
        "question_id": 306400, 
        "title": "How do I randomly select an item from a list using Python?", 
        "annotations": [
            {
                "intent": "randomly select an item from a list", 
                "context": "import random\n\n\n\n\nfoo = ['a', 'b', 'c', 'd', 'e']\n", 
                "normalized_context": "import random\nfoo = ['a', 'b', 'c', 'd', 'e']", 
                "code_snippet": "random.choice(foo)", 
                "normalized_code_snippet": "random.choice(foo)"
            }
        ]
    }, 
    {
        "question_id": 3996904, 
        "title": "Generate random integers between 0 and 9", 
        "annotations": [
            {
                "intent": "Generate random integers between 0 and 9", 
                "context": "from random import randint\n", 
                "normalized_context": "from random import randint", 
                "code_snippet": "randint(0,9)", 
                "normalized_code_snippet": "randint(0, 9)"
            }, 
            {
                "intent": "Generate random integers between 0 and 9", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "random.randint(a, b)\n", 
                "normalized_code_snippet": "random.randint(a, b)"
            }, 
            {
                "intent": "Generate random integers between 0 and 9", 
                "context": "import random\n", 
                "normalized_context": "import random", 
                "code_snippet": "\nprint(random.randint(0,9))\n", 
                "normalized_code_snippet": "print(random.randint(0, 9))"
            }
        ]
    }, 
    {
        "question_id": 627435, 
        "title": "How to remove an element from a list by index in Python?", 
        "annotations": [
            {
                "intent": "remove an element from a list by index", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " del a[-1]\n", 
                "normalized_code_snippet": "del a[(-1)]"
            }, 
            {
                "intent": "remove an element from a list by index", 
                "context": "a = ['a', 'b', 'c', 'd']\n", 
                "normalized_context": "a = ['a', 'b', 'c', 'd']", 
                "code_snippet": "\na.pop(1)\n\n", 
                "normalized_code_snippet": "a.pop(1)"
            }, 
            {
                "intent": "remove an element from a list by index", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\na.pop()\n\n", 
                "normalized_code_snippet": "a.pop()"
            }, 
            {
                "intent": "remove an element from a list by index", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    a.pop(index)\n", 
                "normalized_code_snippet": "a.pop(index)"
            }, 
            {
                "intent": "remove an element from a list by index", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    del a[index]\n", 
                "normalized_code_snippet": "del a[index]"
            }
        ]
    }, 
    {
        "question_id": 1773805, 
        "title": "How can I parse a YAML file in Python", 
        "annotations": [
            {
                "intent": "parse a YAML file", 
                "context": "\n\nimport yaml\n\n", 
                "normalized_context": "import yaml", 
                "code_snippet": "\n\nwith open(\"example.yaml\", 'r') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)\n", 
                "normalized_code_snippet": "with open('example.yaml', 'r') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)"
            }, 
            {
                "intent": "parse a YAML file", 
                "context": "import ruamel.yaml as yaml\n\n", 
                "normalized_context": "import ruamel.yaml as yaml", 
                "code_snippet": "\n\nwith open(\"example.yaml\") as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)\n", 
                "normalized_code_snippet": "with open('example.yaml') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)"
            }
        ]
    }, 
    {
        "question_id": 10406130, 
        "title": "Check if something is not in a list in Python", 
        "annotations": [
            {
                "intent": "Check if something is not in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 3 not in [2, 3, 4]\n", 
                "normalized_code_snippet": "(3 not in [2, 3, 4])"
            }, 
            {
                "intent": "Check if something is not in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " (2, 3) not in [(2, 3), (5, 6), (9, 1)]\n", 
                "normalized_code_snippet": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])"
            }, 
            {
                "intent": "Check if something is not in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " (2, 3) not in [(2, 7), (7, 3), \"hi\"]\n", 
                "normalized_code_snippet": "((2, 3) not in [(2, 7), (7, 3), 'hi'])"
            }, 
            {
                "intent": "Check if something is not in a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 3 not in [4, 5, 6]\n", 
                "normalized_code_snippet": "(3 not in [4, 5, 6])"
            }
        ]
    }, 
    {
        "question_id": 1185524, 
        "title": "How to trim whitespace (including tabs)?", 
        "annotations": [
            {
                "intent": "trim whitespace", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " s.strip()\n", 
                "normalized_code_snippet": "s.strip()"
            }, 
            {
                "intent": "trim whitespace (including tabs)", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "s = s.lstrip()\n", 
                "normalized_code_snippet": "s = s.lstrip()"
            }, 
            {
                "intent": "trim whitespace (including tabs)", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "s = s.rstrip()\n", 
                "normalized_code_snippet": "s = s.rstrip()"
            }, 
            {
                "intent": "trim whitespace (including tabs)", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "s = s.strip(' \\t\\n\\r')\n", 
                "normalized_code_snippet": "s = s.strip(' \\t\\n\\r')"
            }, 
            {
                "intent": "trim whitespace (including tabs)", 
                "context": "import re\n", 
                "normalized_context": "import re", 
                "code_snippet": "\nprint re.sub('[\\s+]', '', s)\n", 
                "normalized_code_snippet": "print re.sub('[\\\\s+]', '', s)"
            }
        ]
    }, 
    {
        "question_id": 354038, 
        "title": "How do I check if a string is a number (float) in Python?", 
        "annotations": [
            {
                "intent": "check if a string is a number (float)", 
                "context": " a = \"03523\"\n", 
                "normalized_context": "a = '03523'", 
                "code_snippet": " a.isdigit()\n", 
                "normalized_code_snippet": "a.isdigit()"
            }, 
            {
                "intent": "check if a string is a number", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "isdigit()", 
                "normalized_code_snippet": "isdigit()"
            }, 
            {
                "intent": "check if a string is a number", 
                "context": " b = \"963spam\"\n", 
                "normalized_context": "b = '963spam'", 
                "code_snippet": " b.isdigit()\n", 
                "normalized_code_snippet": "b.isdigit()"
            }
        ]
    }, 
    {
        "question_id": 2600191, 
        "title": "How can I count the occurrences of a list item in Python?", 
        "annotations": [
            {
                "intent": "count the occurrences of a list item", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " l.count(\"a\")\n", 
                "normalized_code_snippet": "l.count('a')"
            }, 
            {
                "intent": "count the occurrences of a list item", 
                "context": " l = [\"a\",\"b\",\"b\"]\n\n from collections import Counter\n", 
                "normalized_context": "l = ['a', 'b', 'b']\nfrom collections import Counter", 
                "code_snippet": " Counter(l)\n", 
                "normalized_code_snippet": "Counter(l)"
            }, 
            {
                "intent": "count the occurrences of a list item", 
                "context": " l = [\"a\",\"b\",\"b\"]\n", 
                "normalized_context": "l = ['a', 'b', 'b']", 
                "code_snippet": " [[x,l.count(x)] for x in set(l)]\n", 
                "normalized_code_snippet": "[[x, l.count(x)] for x in set(l)]"
            }, 
            {
                "intent": "count the occurrences of a list item", 
                "context": " l = [\"a\",\"b\",\"b\"]\n", 
                "normalized_context": "l = ['a', 'b', 'b']", 
                "code_snippet": " dict((x,l.count(x)) for x in set(l))\n", 
                "normalized_code_snippet": "dict(((x, l.count(x)) for x in set(l)))"
            }, 
            {
                "intent": "count the occurrences of a list item", 
                "context": " l = [\"a\",\"b\",\"b\"]\n", 
                "normalized_context": "l = ['a', 'b', 'b']", 
                "code_snippet": " l.count(\"b\")\n", 
                "normalized_code_snippet": "l.count('b')"
            }
        ]
    }, 
    {
        "question_id": 4940032, 
        "title": "Search for string in txt file Python", 
        "annotations": [
            {
                "intent": "Search for string in txt file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if 'blabla' in open('example.txt').read():\n    print \"true\"\n", 
                "normalized_code_snippet": "if ('blabla' in open('example.txt').read()):\n    pass"
            }, 
            {
                "intent": "Search for string in txt file", 
                "context": "import mmap\n", 
                "normalized_context": "import mmap", 
                "code_snippet": "\nf = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif s.find('blabla') != -1:\n    print 'true'\n", 
                "normalized_code_snippet": "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"
            }, 
            {
                "intent": "Search for string in txt file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n        datafile = file('example.txt')\n        found = False #this isn't really necessary \n        for line in datafile:\n            if blabla in line:\n                #found = True #not necessary \n                return True\n        return False #because you finished the search without finding anything\n\n\n", 
                "normalized_code_snippet": "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"
            }
        ]
    }, 
    {
        "question_id": 845058, 
        "title": "How to get line count cheaply in Python?", 
        "annotations": [
            {
                "intent": "get line count", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " sum(1 for line in open('myfile.txt'))\n", 
                "normalized_code_snippet": "sum((1 for line in open('myfile.txt')))"
            }, 
            {
                "intent": "get line count", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n\ndef bufcount(filename):\n    f = open(filename)                  \n    lines = 0\n    buf_size = 1024 * 1024\n    read_f = f.read # loop optimization\n\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n\n    return lines\n\n", 
                "normalized_code_snippet": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines"
            }
        ]
    }, 
    {
        "question_id": 6416131, 
        "title": "Python add new item to dictionary", 
        "annotations": [
            {
                "intent": "add new item to dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "default_data['item3'] = 3\n", 
                "normalized_code_snippet": "default_data['item3'] = 3"
            }, 
            {
                "intent": "add new item to dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "default_data.update({'item3': 3})\n", 
                "normalized_code_snippet": "default_data.update({'item3': 3, })"
            }, 
            {
                "intent": "add new item to dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "default_data.update({'item4': 4, 'item5': 5})\n", 
                "normalized_code_snippet": "default_data.update({'item4': 4, 'item5': 5, })"
            }
        ]
    }, 
    {
        "question_id": 53513, 
        "title": "Best way to check if a list is empty", 
        "annotations": [
            {
                "intent": "check if a list is empty", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if not a:\n  ", 
                "normalized_code_snippet": "if (not a):\n    pass"
            }, 
            {
                "intent": "check if a list is empty", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if not seq:", 
                "normalized_code_snippet": "if (not seq):\n    pass"
            }, 
            {
                "intent": "check if a list is empty", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if len(li) == 0:\n    ", 
                "normalized_code_snippet": "if (len(li) == 0):\n    pass"
            }
        ]
    }, 
    {
        "question_id": 849674, 
        "title": "Simple threading in Python 2.6 using thread.start_new_thread()", 
        "annotations": [
            {
                "intent": "Simple threading in Python 2.6 using thread.start_new_thread()", 
                "context": "import thread\n\n\ndef myfunction(mystring,*args):\n    print mystring\n\n\n", 
                "normalized_context": "import thread\n\ndef myfunction(mystring, *args):\n    print mystring", 
                "code_snippet": "\n\n        thread.start_new_thread(myfunction,('MyStringHere',1))\n\n    ", 
                "normalized_code_snippet": "thread.start_new_thread(myfunction, ('MyStringHere', 1))"
            }, 
            {
                "intent": "Simple threading in Python 2.6 using thread.start_new_thread()", 
                "context": "import thread\n\n\ndef myfunction(mystring,*args):\n    print mystring\n\n\n", 
                "normalized_context": "import thread\n\ndef myfunction(mystring, *args):\n    print mystring", 
                "code_snippet": "\n\n        thread.start_new_thread(myfunction,('MyStringHere',1))\n\n    ", 
                "normalized_code_snippet": "thread.start_new_thread(myfunction, ('MyStringHere', 1))"
            }
        ]
    }, 
    {
        "question_id": 8270092, 
        "title": "Python remove all whitespace in a string", 
        "annotations": [
            {
                "intent": "remove all whitespace in a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nsentence.replace(\" \", \"\")\n", 
                "normalized_code_snippet": "sentence.replace(' ', '')"
            }, 
            {
                "intent": "remove all whitespace in a string", 
                "context": "import re\n", 
                "normalized_context": "import re", 
                "code_snippet": "\npattern = re.compile(r'\\s+')\nsentence = re.sub(pattern, '', sentence)\n", 
                "normalized_code_snippet": "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"
            }, 
            {
                "intent": "remove all whitespace in a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " sentence.strip()\n", 
                "normalized_code_snippet": "sentence.strip()"
            }, 
            {
                "intent": "remove all whitespace in a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "sentence = re.sub(r\"\\s+\", \"\", sentence, flags=re.UNICODE)\n", 
                "normalized_code_snippet": "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"
            }, 
            {
                "intent": "remove all whitespace in a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "sentence = ''.join(sentence.split())\n", 
                "normalized_code_snippet": "sentence = ''.join(sentence.split())"
            }
        ]
    }, 
    {
        "question_id": 227459, 
        "title": "ASCII value of a character in Python", 
        "annotations": [
            {
                "intent": "get the <a href=\"http://en.wikipedia.org/wiki/ASCII\" rel=\"nofollow noreferrer\">ASCII</a> value of a character as an int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " ord('a')\n", 
                "normalized_code_snippet": "ord('a')"
            }, 
            {
                "intent": "get the <a href=\"http://en.wikipedia.org/wiki/ASCII\" rel=\"nofollow noreferrer\">ASCII</a> value of a character as an int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " ord(u'\u3042')\n", 
                "normalized_code_snippet": "ord(u'\\u3042')"
            }, 
            {
                "intent": "get the <a href=\"http://en.wikipedia.org/wiki/ASCII\" rel=\"nofollow noreferrer\">ASCII</a> value of a character as an int", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "ord()\n", 
                "normalized_code_snippet": "ord()"
            }
        ]
    }, 
    {
        "question_id": 931092, 
        "title": "Reverse a string in Python", 
        "annotations": [
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'hello world'[::-1]\n", 
                "normalized_code_snippet": "'hello world'[::(-1)]"
            }, 
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "s[::-1]", 
                "normalized_code_snippet": "s[::(-1)]"
            }, 
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "''.join(reversed('foo'))", 
                "normalized_code_snippet": "''.join(reversed('foo'))"
            }, 
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " ''.join(reversed(string))\n", 
                "normalized_code_snippet": "''.join(reversed(string))"
            }, 
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "'foo'[::-1]\n", 
                "normalized_code_snippet": "'foo'[::(-1)]"
            }, 
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " a_string[::-1]\n", 
                "normalized_code_snippet": "a_string[::(-1)]"
            }, 
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "def reversed_string(a_string):\n    return a_string[::-1]\n", 
                "normalized_code_snippet": "def reversed_string(a_string):\n    return a_string[::(-1)]"
            }, 
            {
                "intent": "Reverse a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "''.join(reversed(s))", 
                "normalized_code_snippet": "''.join(reversed(s))"
            }
        ]
    }, 
    {
        "question_id": 415511, 
        "title": "How to get current time in Python", 
        "annotations": [
            {
                "intent": "get current time", 
                "context": " import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": " datetime.datetime.now()\n", 
                "normalized_code_snippet": "datetime.datetime.now()"
            }, 
            {
                "intent": "get current time", 
                "context": " import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": " datetime.datetime.now().time()\n", 
                "normalized_code_snippet": "datetime.datetime.now().time()"
            }, 
            {
                "intent": "get current time", 
                "context": " from time import gmtime, strftime\n", 
                "normalized_context": "from time import gmtime, strftime", 
                "code_snippet": " strftime(\"%Y-%m-%d %H:%M:%S\", gmtime())\n", 
                "normalized_code_snippet": "strftime('%Y-%m-%d %H:%M:%S', gmtime())"
            }, 
            {
                "intent": "get current time", 
                "context": " from datetime import datetime\n", 
                "normalized_context": "from datetime import datetime", 
                "code_snippet": " str(datetime.now())\n", 
                "normalized_code_snippet": "str(datetime.now())"
            }, 
            {
                "intent": "get current time", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " datetime.datetime.time(datetime.datetime.now())\n", 
                "normalized_code_snippet": "datetime.datetime.time(datetime.datetime.now())"
            }
        ]
    }, 
    {
        "question_id": 14043934, 
        "title": "python time offset", 
        "annotations": [
            {
                "intent": "time offset", 
                "context": " import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": " t = datetime.datetime.now()\n\n t - datetime.timedelta(hours=1, minutes=10)\n", 
                "normalized_code_snippet": "t = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))"
            }, 
            {
                "intent": "time offset", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " t - datetime.timedelta(hours=1, minutes=10)\n", 
                "normalized_code_snippet": "(t - datetime.timedelta(hours=1, minutes=10))"
            }, 
            {
                "intent": "time offset", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " dt = datetime.datetime.combine(datetime.date.today(), t)\n", 
                "normalized_code_snippet": "dt = datetime.datetime.combine(datetime.date.today(), t)"
            }, 
            {
                "intent": "time offset", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " dt -= datetime.timedelta(hours=5)\n", 
                "normalized_code_snippet": "dt -= datetime.timedelta(hours=5)"
            }
        ]
    }, 
    {
        "question_id": 3940128, 
        "title": "How can I reverse a list in python?", 
        "annotations": [
            {
                "intent": "reverse a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " L[::-1]\n", 
                "normalized_code_snippet": "L[::(-1)]"
            }, 
            {
                "intent": "reverse a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " reversed(array)", 
                "normalized_code_snippet": "reversed(array)"
            }, 
            {
                "intent": "reverse a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " L.reverse()\n", 
                "normalized_code_snippet": "L.reverse()"
            }, 
            {
                "intent": "reverse a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "list(reversed(array))", 
                "normalized_code_snippet": "list(reversed(array))"
            }
        ]
    }, 
    {
        "question_id": 1949318, 
        "title": "Checking if a website is up via Python", 
        "annotations": [
            {
                "intent": "Checking if a website is up", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " urllib.urlopen(\"http://www.stackoverflow.com\").getcode()\n", 
                "normalized_code_snippet": "urllib.urlopen('http://www.stackoverflow.com').getcode()"
            }, 
            {
                "intent": "Checking if a website is up", 
                "context": "import httplib\n", 
                "normalized_context": "import httplib", 
                "code_snippet": "\nconn = httplib.HTTPConnection(\"www.python.org\")\nconn.request(\"HEAD\", \"/\")\nr1 = conn.getresponse()\nprint r1.status, r1.reason\n", 
                "normalized_code_snippet": "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint r1.status, r1.reason"
            }, 
            {
                "intent": "Checking if a website is up", 
                "context": "import requests\n\n", 
                "normalized_context": "import requests", 
                "code_snippet": "\n    r = requests.head(url)\n    return r.status_code == 200\n", 
                "normalized_code_snippet": "r = requests.head(url)\nreturn (r.status_code == 200)"
            }, 
            {
                "intent": "Checking if a website is up", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print urllib.urlopen(\"http://www.stackoverflow.com\").getcode()\n", 
                "normalized_code_snippet": "print urllib.urlopen('http://www.stackoverflow.com').getcode()"
            }
        ]
    }, 
    {
        "question_id": 2052390, 
        "title": "Manually raising (throwing) an exception in Python", 
        "annotations": [
            {
                "intent": "manually throw/raise an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "raise ValueError('A very specific bad thing happened')\n", 
                "normalized_code_snippet": "raise ValueError('A very specific bad thing happened')"
            }, 
            {
                "intent": "Manually raising (throwing) an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "raise Exception('I know Python!') ", 
                "normalized_code_snippet": "raise Exception('I know Python!')"
            }, 
            {
                "intent": "Manually raising (throwing) an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "raise Exception(\"I know python!\")\n", 
                "normalized_code_snippet": "raise Exception('I know python!')"
            }, 
            {
                "intent": "Manually raising (throwing) an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n        raise ValueError('represents a hidden bug, do not catch this')\n        ", 
                "normalized_code_snippet": "raise ValueError('represents a hidden bug, do not catch this')"
            }, 
            {
                "intent": "Manually raising (throwing) an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n        raise Exception('This is the exception you expect to handle')\n    ", 
                "normalized_code_snippet": "raise Exception('This is the exception you expect to handle')"
            }, 
            {
                "intent": "Manually raising (throwing) an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "raise ValueError('A very specific bad thing happened')\n", 
                "normalized_code_snippet": "raise ValueError('A very specific bad thing happened')"
            }, 
            {
                "intent": "Manually raising (throwing) an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "    raise RuntimeError('specific message') ", 
                "normalized_code_snippet": "raise RuntimeError('specific message')"
            }, 
            {
                "intent": "Manually raising (throwing) an exception", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    raise AssertionError(\"Unexpected value of 'distance'!\", distance)\n", 
                "normalized_code_snippet": "raise AssertionError(\"Unexpected value of 'distance'!\", distance)"
            }
        ]
    }, 
    {
        "question_id": 2331943, 
        "title": "How to decode JSON with Python", 
        "annotations": [
            {
                "intent": "decode JSON", 
                "context": "\nimport json\n\n", 
                "normalized_context": "import json", 
                "code_snippet": " json.load(u)\n", 
                "normalized_code_snippet": "json.load(u)"
            }
        ]
    }, 
    {
        "question_id": 273192, 
        "title": "How to check if a directory exists and create it if necessary?", 
        "annotations": [
            {
                "intent": "check if a directory exists and create it if necessary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if not os.path.exists(directory):\n    os.makedirs(directory)\n", 
                "normalized_code_snippet": "if (not os.path.exists(directory)):\n    os.makedirs(directory)"
            }, 
            {
                "intent": "check if a directory exists and create it if necessary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "try: \n    os.makedirs(path)\nexcept OSError:\n    if not os.path.isdir(path):\n        raise\n", 
                "normalized_code_snippet": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise"
            }, 
            {
                "intent": "check if a directory exists and create it if necessary", 
                "context": "import distutils.dir_util\n", 
                "normalized_context": "import distutils.dir_util", 
                "code_snippet": "\ndistutils.dir_util.mkpath(path)\n", 
                "normalized_code_snippet": "distutils.dir_util.mkpath(path)"
            }, 
            {
                "intent": "check if a directory exists and create it if necessary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    try:\n        os.makedirs(path)\n    except OSError as exception:\n        if exception.errno != errno.EEXIST:\n            raise\n", 
                "normalized_code_snippet": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise"
            }
        ]
    }, 
    {
        "question_id": 14931769, 
        "title": "How to get all combination of n binary value?", 
        "annotations": [
            {
                "intent": "get all combination of n binary value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nlst = list(itertools.product([0, 1], repeat=n))\n", 
                "normalized_code_snippet": "lst = list(itertools.product([0, 1], repeat=n))"
            }, 
            {
                "intent": "get all combination of n binary value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "lst = map(list, itertools.product([0, 1], repeat=n))\n", 
                "normalized_code_snippet": "lst = map(list, itertools.product([0, 1], repeat=n))"
            }, 
            {
                "intent": "get all combination of n binary value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "bin = [0,1]\n[ (x,y,z) for x in bin for y in bin for z in bin ]\n", 
                "normalized_code_snippet": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"
            }, 
            {
                "intent": "get all combination of n binary value", 
                "context": "import itertools\n", 
                "normalized_context": "import itertools", 
                "code_snippet": "\nlst = list(itertools.product([0, 1], repeat=3))\n", 
                "normalized_code_snippet": "lst = list(itertools.product([0, 1], repeat=3))"
            }
        ]
    }, 
    {
        "question_id": 3518778, 
        "title": "How to read csv into record array in numpy?", 
        "annotations": [
            {
                "intent": "read csv into record array in numpy", 
                "context": "from numpy import genfromtxt\n", 
                "normalized_context": "from numpy import genfromtxt", 
                "code_snippet": "\nmy_data = genfromtxt('my_file.csv', delimiter=',')\n", 
                "normalized_code_snippet": "my_data = genfromtxt('my_file.csv', delimiter=',')"
            }, 
            {
                "intent": "read csv into record array in numpy", 
                "context": "import pandas as pd\n", 
                "normalized_context": "import pandas as pd", 
                "code_snippet": "\ndf=pd.read_csv('myfile.csv', sep=',',header=None)\n", 
                "normalized_code_snippet": "df = pd.read_csv('myfile.csv', sep=',', header=None)"
            }, 
            {
                "intent": "read csv into record array in numpy", 
                "context": "\n\nimport numpy as np\n", 
                "normalized_context": "import numpy as np", 
                "code_snippet": "\nnp.genfromtxt('myfile.csv',delimiter=',')\n", 
                "normalized_code_snippet": "np.genfromtxt('myfile.csv', delimiter=',')"
            }, 
            {
                "intent": "read csv into record array", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "np.genfromtxt('myfile.csv',delimiter=',',dtype=None)\n", 
                "normalized_code_snippet": "np.genfromtxt('myfile.csv', delimiter=',', dtype=None)"
            }
        ]
    }, 
    {
        "question_id": 4020539, 
        "title": "Process escape sequences in a string in Python", 
        "annotations": [
            {
                "intent": "Process escape sequences in a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " myString.decode('string_escape') ", 
                "normalized_code_snippet": "myString.decode('string_escape')"
            }
        ]
    }, 
    {
        "question_id": 21129020, 
        "title": "How to fix: \"UnicodeDecodeError: 'ascii' codec can't decode byte\"", 
        "annotations": [
            {
                "intent": "How to fix: \"UnicodeDecodeError: 'ascii' codec can't decode byte\"", 
                "context": "  \nimport sys  \n\n", 
                "normalized_context": "import sys", 
                "code_snippet": "  \nsys.setdefaultencoding('utf8')\n", 
                "normalized_code_snippet": "sys.setdefaultencoding('utf8')"
            }
        ]
    }, 
    {
        "question_id": 1854, 
        "title": "Python: What OS am I running on?", 
        "annotations": [
            {
                "intent": "What OS am I running on", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " import platform\n\n platform.system()\n", 
                "normalized_code_snippet": "import platform\nplatform.system()"
            }, 
            {
                "intent": "What OS am I running on", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " import platform\n\n platform.release()\n", 
                "normalized_code_snippet": "import platform\nplatform.release()"
            }, 
            {
                "intent": "What OS am I running on", 
                "context": " import os\n", 
                "normalized_context": "import os", 
                "code_snippet": " print os.name\n", 
                "normalized_code_snippet": "print os.name"
            }
        ]
    }, 
    {
        "question_id": 613183, 
        "title": "Sort a Python dictionary by value", 
        "annotations": [
            {
                "intent": "Sort a Python dictionary by value", 
                "context": "import operator\n\n\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n", 
                "normalized_context": "import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0, }", 
                "code_snippet": " sorted(x.items(), key=operator.itemgetter(1))\n", 
                "normalized_code_snippet": "sorted(x.items(), key=operator.itemgetter(1))"
            }, 
            {
                "intent": "Sort a Python dictionary by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "sorted(dict1, key=dict1.get)", 
                "normalized_code_snippet": "sorted(dict1, key=dict1.get)"
            }, 
            {
                "intent": "Sort a Python dictionary by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " sorted(d, key=d.get, reverse=True)", 
                "normalized_code_snippet": "sorted(d, key=d.get, reverse=True)"
            }, 
            {
                "intent": "Sort a Python dictionary by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "sorted(d.items(), key=lambda x: x[1])", 
                "normalized_code_snippet": "sorted(d.items(), key=(lambda x: x[1]))"
            }
        ]
    }, 
    {
        "question_id": 31818050, 
        "title": "Python 2.7: round number to nearest integer", 
        "annotations": [
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "int(round(x))\n", 
                "normalized_code_snippet": "int(round(x))"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "h = int(round(h))\n", 
                "normalized_code_snippet": "h = int(round(h))"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(32.268907563, 3)\n", 
                "normalized_code_snippet": "round(32.268907563, 3)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "round(value,significantDigit)", 
                "normalized_code_snippet": "round(value, significantDigit)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(1.0005,3)\n", 
                "normalized_code_snippet": "round(1.0005, 3)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(2.0005,3)\n", 
                "normalized_code_snippet": "round(2.0005, 3)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(3.0005,3)\n", 
                "normalized_code_snippet": "round(3.0005, 3)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(4.0005,3)\n", 
                "normalized_code_snippet": "round(4.0005, 3)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(8.005,2)\n", 
                "normalized_code_snippet": "round(8.005, 2)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(7.005,2)\n", 
                "normalized_code_snippet": "round(7.005, 2)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(6.005,2)\n", 
                "normalized_code_snippet": "round(6.005, 2)"
            }, 
            {
                "intent": "round number to nearest integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " round(1.005,2)\n", 
                "normalized_code_snippet": "round(1.005, 2)"
            }
        ]
    }, 
    {
        "question_id": 3501382, 
        "title": "Checking whether a variable is an integer or not", 
        "annotations": [
            {
                "intent": "Checking whether a variable is an integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nisinstance( x, int ) ", 
                "normalized_code_snippet": "isinstance(x, int)"
            }, 
            {
                "intent": "Checking whether a variable is an integer", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\ntype( x ) == int ", 
                "normalized_code_snippet": "(type(x) == int)"
            }
        ]
    }, 
    {
        "question_id": 89228, 
        "title": "Calling an external command in Python", 
        "annotations": [
            {
                "intent": "Calling an external command", 
                "context": "from subprocess import call\n", 
                "normalized_context": "from subprocess import call", 
                "code_snippet": "from subprocess import call\n", 
                "normalized_code_snippet": "from subprocess import call"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nos.system(\"some_command with args\")", 
                "normalized_code_snippet": "os.system('some_command with args')"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.system(\"some_command < input_file | another_command > output_file\")  \n", 
                "normalized_code_snippet": "os.system('some_command < input_file | another_command > output_file')"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "stream = os.popen(\"some_command with args\")", 
                "normalized_code_snippet": "stream = os.popen('some_command with args')"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "print subprocess.Popen(\"echo Hello World\", shell=True, stdout=subprocess.PIPE).stdout.read()\n", 
                "normalized_code_snippet": "print subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read()"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "print os.popen(\"echo Hello World\").read()\n", 
                "normalized_code_snippet": "print os.popen('echo Hello World').read()"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "return_code = subprocess.call(\"echo Hello World\", shell=True)  \n", 
                "normalized_code_snippet": "return_code = subprocess.call('echo Hello World', shell=True)"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "import subprocess\n\n", 
                "normalized_context": "import subprocess", 
                "code_snippet": "\n\np = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print line,\nretval = p.wait()\n", 
                "normalized_code_snippet": "p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print line,\nretval = p.wait()"
            }, 
            {
                "intent": "Calling an external command", 
                "context": "from subprocess import call\n", 
                "normalized_context": "from subprocess import call", 
                "code_snippet": "\ncall([\"ls\", \"-l\"])\n", 
                "normalized_code_snippet": "call(['ls', '-l'])"
            }
        ]
    }, 
    {
        "question_id": 493386, 
        "title": "How to print in Python without newline or space?", 
        "annotations": [
            {
                "intent": "print in Python without newline or space", 
                "context": "import sys\n", 
                "normalized_context": "import sys", 
                "code_snippet": "\nsys.stdout.write('.')\n", 
                "normalized_code_snippet": "sys.stdout.write('.')"
            }
        ]
    }, 
    {
        "question_id": 311627, 
        "title": "How to print date in a regular format in Python?", 
        "annotations": [
            {
                "intent": "print date in a regular format", 
                "context": "import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": " datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n", 
                "normalized_code_snippet": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')"
            }, 
            {
                "intent": "print date in a regular format", 
                "context": "import time\n", 
                "normalized_context": "import time", 
                "code_snippet": " time.strftime(\"%Y-%m-%d %H:%M\")\n", 
                "normalized_code_snippet": "time.strftime('%Y-%m-%d %H:%M')"
            }
        ]
    }, 
    {
        "question_id": 1024847, 
        "title": "Add key to a dictionary in Python?", 
        "annotations": [
            {
                "intent": "Add key to a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " d['mynewkey'] = 'mynewvalue'\n", 
                "normalized_code_snippet": "d['mynewkey'] = 'mynewvalue'"
            }, 
            {
                "intent": "Add key to a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\ndata.update({'a':1})\n", 
                "normalized_code_snippet": "data.update({'a': 1, })"
            }, 
            {
                "intent": "Add key to a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\ndata.update(dict(a=1))\n", 
                "normalized_code_snippet": "data.update(dict(a=1))"
            }, 
            {
                "intent": "Add key to a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\ndata.update(a=1)\n\n", 
                "normalized_code_snippet": "data.update(a=1)"
            }
        ]
    }, 
    {
        "question_id": 120656, 
        "title": "Directory listing in Python", 
        "annotations": [
            {
                "intent": "Directory listing", 
                "context": "import os\n\n", 
                "normalized_context": "import os", 
                "code_snippet": "\n\nfor dirname, dirnames, filenames in os.walk('.'):\n    # print path to all subdirectories first.\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n\n    # print path to all filenames.\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n    ", 
                "normalized_code_snippet": "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print os.path.join(dirname, subdirname)\n    for filename in filenames:\n        pass"
            }, 
            {
                "intent": "Directory listing", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.listdir(path)\n", 
                "normalized_code_snippet": "os.listdir(path)"
            }
        ]
    }, 
    {
        "question_id": 1823058, 
        "title": "How to print number with commas as thousands separators?", 
        "annotations": [
            {
                "intent": "print number with commas as thousands separators", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\"{:,}\".format(value)\n", 
                "normalized_code_snippet": "'{:,}'.format(value)"
            }, 
            {
                "intent": "print number with commas as thousands separators", 
                "context": ">>> import locale\n", 
                "normalized_context": "import locale", 
                "code_snippet": "\n>>> locale.setlocale(locale.LC_ALL, 'en_US')\n\n\n>>> locale.format(\"%d\", 1255000, grouping=True)\n", 
                "normalized_code_snippet": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)"
            }
        ]
    }, 
    {
        "question_id": 2150739, 
        "title": "ISO Time (ISO 8601) in Python?", 
        "annotations": [
            {
                "intent": "ISO Time (ISO 8601) in Python", 
                "context": "import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": "\ndatetime.datetime.now().isoformat()\n", 
                "normalized_code_snippet": "datetime.datetime.now().isoformat()"
            }, 
            {
                "intent": "ISO Time (ISO 8601) in Python", 
                "context": "import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": "\ndatetime.datetime.utcnow().isoformat()\n", 
                "normalized_code_snippet": "datetime.datetime.utcnow().isoformat()"
            }
        ]
    }, 
    {
        "question_id": 4641765, 
        "title": "Add to integers in a list", 
        "annotations": [
            {
                "intent": "Add to integers in a list", 
                "context": "foo = [1,2,3,4,5]\n", 
                "normalized_context": "foo = [1, 2, 3, 4, 5]", 
                "code_snippet": "\nfoo.append( 4 )\n", 
                "normalized_code_snippet": "foo.append(4)"
            }, 
            {
                "intent": "Add to integers in a list", 
                "context": "foo = [1,2,3,4,5]\n", 
                "normalized_context": "foo = [1, 2, 3, 4, 5]", 
                "code_snippet": "\nfoo.append( [8,7] )    \n", 
                "normalized_code_snippet": "foo.append([8, 7])"
            }, 
            {
                "intent": "Add to integers in a list", 
                "context": "x = [2,5,10]\n", 
                "normalized_context": "x = [2, 5, 10]", 
                "code_snippet": "\nx.insert(2, 77)\n", 
                "normalized_code_snippet": "x.insert(2, 77)"
            }
        ]
    }, 
    {
        "question_id": 1747817, 
        "title": "Create a dictionary with list comprehension in Python", 
        "annotations": [
            {
                "intent": "Create a dictionary with list comprehension", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "d = dict((key, value) for (key, value) in iterable)\n", 
                "normalized_code_snippet": "d = dict(((key, value) for (key, value) in iterable))"
            }, 
            {
                "intent": "Create a dictionary with list comprehension", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "d = {key: value for (key, value) in iterable}\n", 
                "normalized_code_snippet": "d = {key: value for (key, value) in iterable}"
            }, 
            {
                "intent": "Create a dictionary with list comprehension", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "d = {k:v for k, v in iterable}\n", 
                "normalized_code_snippet": "d = {k: v for (k, v) in iterable}"
            }
        ]
    }, 
    {
        "question_id": 2793324, 
        "title": "Is there a simple way to delete a list element by value in python?", 
        "annotations": [
            {
                "intent": "delete a list element by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " a.remove('b')\n", 
                "normalized_code_snippet": "a.remove('b')"
            }, 
            {
                "intent": "delete a list element by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    a.remove(c)\n", 
                "normalized_code_snippet": "a.remove(c)"
            }, 
            {
                "intent": "delete a list element by value", 
                "context": "a=[1,2,3,4]\n", 
                "normalized_context": "a = [1, 2, 3, 4]", 
                "code_snippet": "\n    a.remove(6)\n", 
                "normalized_code_snippet": "a.remove(6)"
            }, 
            {
                "intent": "delete a list element by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    a.remove(6)\n", 
                "normalized_code_snippet": "a.remove(6)"
            }, 
            {
                "intent": "delete a list element by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if c in a:\n    a.remove(c)\n", 
                "normalized_code_snippet": "if (c in a):\n    a.remove(c)"
            }, 
            {
                "intent": "delete a list element by value", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "try:\n    a.remove(c)\nexcept ValueError:\n    pass\n", 
                "normalized_code_snippet": "try:\n    a.remove(c)\nexcept ValueError:\n    pass"
            }
        ]
    }, 
    {
        "question_id": 3523048, 
        "title": "Add another tuple to a tuple of tuples", 
        "annotations": [
            {
                "intent": "Add another tuple to a tuple", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "final_choices = (another_choice,) + my_choices\n", 
                "normalized_code_snippet": "final_choices = ((another_choice,) + my_choices)"
            }, 
            {
                "intent": "Add another tuple to a tuple", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nfinal_choices = (another_choice,) + my_choices\n", 
                "normalized_code_snippet": "final_choices = ((another_choice,) + my_choices)"
            }
        ]
    }, 
    {
        "question_id": 123198, 
        "title": "How do I copy a file in python?", 
        "annotations": [
            {
                "intent": "copy a file", 
                "context": "from shutil import copyfile\n\n", 
                "normalized_context": "from shutil import copyfile", 
                "code_snippet": "\n\ncopyfile(src, dst)\n", 
                "normalized_code_snippet": "copyfile(src, dst)"
            }, 
            {
                "intent": "copy a file", 
                "context": "import shutil\n", 
                "normalized_context": "import shutil", 
                "code_snippet": "\nshutil.copy2('/dir/file.ext', '/new/dir/newname.ext')\n", 
                "normalized_code_snippet": "shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')"
            }, 
            {
                "intent": "copy a file", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "shutil.copy2('/dir/file.ext', '/new/dir')\n", 
                "normalized_code_snippet": "shutil.copy2('/dir/file.ext', '/new/dir')"
            }
        ]
    }, 
    {
        "question_id": 1602934, 
        "title": "Check if a given key already exists in a dictionary", 
        "annotations": [
            {
                "intent": "Check if a given key already exists in a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'key1' in dict", 
                "normalized_code_snippet": "('key1' in dict)"
            }, 
            {
                "intent": "Check if a given key already exists in a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n'a' in d ", 
                "normalized_code_snippet": "('a' in d)"
            }, 
            {
                "intent": "Check if a given key already exists in a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n'c' in d ", 
                "normalized_code_snippet": "('c' in d)"
            }, 
            {
                "intent": "Check if a given key already exists in a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if 'key1' in dict:\n  ", 
                "normalized_code_snippet": "if ('key1' in dict):\n    pass"
            }, 
            {
                "intent": "Check if a given key already exists in a dictionary", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    if key in d:\n        ", 
                "normalized_code_snippet": "if (key in d):\n    pass"
            }
        ]
    }, 
    {
        "question_id": 9573244, 
        "title": "Most elegant way to check if the string is empty in Python?", 
        "annotations": [
            {
                "intent": "check if the string is empty", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if not myString:\n", 
                "normalized_code_snippet": "if (not myString):\n    pass"
            }, 
            {
                "intent": "Most elegant way to check if the string is empty", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if not some_string:\n", 
                "normalized_code_snippet": "if (not some_string):\n    pass"
            }, 
            {
                "intent": "Most elegant way to check if the string is empty", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if not my_string:\n", 
                "normalized_code_snippet": "if (not my_string):\n    pass"
            }, 
            {
                "intent": "check if the string is empty", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "if some_string:\n", 
                "normalized_code_snippet": "if some_string:\n    pass"
            }
        ]
    }, 
    {
        "question_id": 743806, 
        "title": "Split string into a list in Python", 
        "annotations": [
            {
                "intent": "Split string into a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " text.split()      \n", 
                "normalized_code_snippet": "text.split()"
            }, 
            {
                "intent": "Split string into a list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " text.split(\",\")   \n", 
                "normalized_code_snippet": "text.split(',')"
            }, 
            {
                "intent": "Split string into a list", 
                "context": " line=\"a sentence with a few words\"\n", 
                "normalized_context": "line = 'a sentence with a few words'", 
                "code_snippet": " line.split()\n", 
                "normalized_code_snippet": "line.split()"
            }
        ]
    }, 
    {
        "question_id": 518021, 
        "title": "Getting the length of an array in Python", 
        "annotations": [
            {
                "intent": "Getting the length of an array", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nlen(my_list)\n", 
                "normalized_code_snippet": "len(my_list)"
            }, 
            {
                "intent": "Getting the length of an array", 
                "context": "l = [1,2,3,4]\n", 
                "normalized_context": "l = [1, 2, 3, 4]", 
                "code_snippet": "\nlen(l) ", 
                "normalized_code_snippet": "len(l)"
            }, 
            {
                "intent": "Getting the length of an array", 
                "context": "\ns = 'abcde'\n", 
                "normalized_context": "s = 'abcde'", 
                "code_snippet": "\nlen(s) ", 
                "normalized_code_snippet": "len(s)"
            }, 
            {
                "intent": "Getting the length of an array", 
                "context": "my_tuple = (1,2,3,4,5)\n", 
                "normalized_context": "my_tuple = (1, 2, 3, 4, 5)", 
                "code_snippet": "\nlen(my_tuple)\n", 
                "normalized_code_snippet": "len(my_tuple)"
            }, 
            {
                "intent": "Getting the length of an array", 
                "context": "my_string = 'hello world'\n", 
                "normalized_context": "my_string = 'hello world'", 
                "code_snippet": "\nlen(my_string)\n", 
                "normalized_code_snippet": "len(my_string)"
            }
        ]
    }, 
    {
        "question_id": 19339, 
        "title": "Transpose/Unzip Function (inverse of zip)?", 
        "annotations": [
            {
                "intent": "inverse of zip", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n", 
                "normalized_code_snippet": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"
            }, 
            {
                "intent": "inverse of zip", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n", 
                "normalized_code_snippet": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"
            }, 
            {
                "intent": "inverse of zip", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "result = ([ a for a,b in original ], [ b for a,b in original ])\n", 
                "normalized_code_snippet": "result = ([a for (a, b) in original], [b for (a, b) in original])"
            }, 
            {
                "intent": "inverse of zip", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "result = (( a for a,b in original ), ( b for a,b in original ))\n", 
                "normalized_code_snippet": "result = ((a for (a, b) in original), (b for (a, b) in original))"
            }, 
            {
                "intent": "inverse of zip", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])\n", 
                "normalized_code_snippet": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"
            }, 
            {
                "intent": "inverse of zip", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])\n", 
                "normalized_code_snippet": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"
            }
        ]
    }, 
    {
        "question_id": 510348, 
        "title": "How can I make a time delay in Python?", 
        "annotations": [
            {
                "intent": "make a time delay", 
                "context": "import time\n", 
                "normalized_context": "import time", 
                "code_snippet": "\ntime.sleep(5) ", 
                "normalized_code_snippet": "time.sleep(5)"
            }, 
            {
                "intent": "make a time delay", 
                "context": "import time \n", 
                "normalized_context": "import time", 
                "code_snippet": "\n    time.sleep(60)  ", 
                "normalized_code_snippet": "time.sleep(60)"
            }, 
            {
                "intent": "make a time delay", 
                "context": "from time import sleep\n", 
                "normalized_context": "from time import sleep", 
                "code_snippet": "\nsleep(0.1) ", 
                "normalized_code_snippet": "sleep(0.1)"
            }, 
            {
                "intent": "make a time delay", 
                "context": "import time\n", 
                "normalized_context": "import time", 
                "code_snippet": "\ntime.sleep(60)\n", 
                "normalized_code_snippet": "time.sleep(60)"
            }, 
            {
                "intent": "make a time delay", 
                "context": "import time\n", 
                "normalized_context": "import time", 
                "code_snippet": "\ntime.sleep(0.1) \n", 
                "normalized_code_snippet": "time.sleep(0.1)"
            }
        ]
    }, 
    {
        "question_id": 2151517, 
        "title": "Pythonic Way to Create Union of All Values Contained in Multiple Lists", 
        "annotations": [
            {
                "intent": "Create Union of All Values Contained in Multiple Lists", 
                "context": ">>> results_list = [[1,2,3], [1,2,4]]\n", 
                "normalized_context": "results_list = [[1, 2, 3], [1, 2, 4]]", 
                "code_snippet": "\n>>> results_union = set().union(*results_list)\n", 
                "normalized_code_snippet": "results_union = set().union(*results_list)"
            }, 
            {
                "intent": "Create Union of All Values Contained in Multiple Lists", 
                "context": "   import itertools\n\n   ", 
                "normalized_context": "import itertools", 
                "code_snippet": "\n\n   return list(set(itertools.chain(*result_list)))\n", 
                "normalized_code_snippet": "return list(set(itertools.chain(*result_list)))"
            }
        ]
    }, 
    {
        "question_id": 82831, 
        "title": "How do I check whether a file exists using Python?", 
        "annotations": [
            {
                "intent": "check whether a file exists", 
                "context": "import os.path\n", 
                "normalized_context": "import os.path", 
                "code_snippet": "\nos.path.isfile(fname) \n", 
                "normalized_code_snippet": "os.path.isfile(fname)"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "from pathlib import Path\n\n", 
                "normalized_context": "from pathlib import Path", 
                "code_snippet": "\n\nmy_file = Path(\"/path/to/file\")\nif my_file.is_file():\n    # file exists\n", 
                "normalized_code_snippet": "my_file = Path('/path/to/file')\nif my_file.is_file():\n    pass"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "import os.path\n", 
                "normalized_context": "import os.path", 
                "code_snippet": "\nos.path.exists(file_path)\n", 
                "normalized_code_snippet": "os.path.exists(file_path)"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print os.path.isfile(\"/etc/password.txt\")\n", 
                "normalized_code_snippet": "print os.path.isfile('/etc/password.txt')"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print os.path.isfile(\"/etc\")\n", 
                "normalized_code_snippet": "print os.path.isfile('/etc')"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print os.path.exists(\"/does/not/exist\")\n", 
                "normalized_code_snippet": "print os.path.exists('/does/not/exist')"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print os.path.isfile(\"/does/not/exist\")\n", 
                "normalized_code_snippet": "print os.path.isfile('/does/not/exist')"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print os.path.exists(\"/etc\")\n", 
                "normalized_code_snippet": "print os.path.exists('/etc')"
            }, 
            {
                "intent": "check whether a file exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print os.path.exists(\"/etc/password.txt\")\n", 
                "normalized_code_snippet": "print os.path.exists('/etc/password.txt')"
            }
        ]
    }, 
    {
        "question_id": 510357, 
        "title": "Python read a single character from the user", 
        "annotations": [
            {
                "intent": "read a single character from the user", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "sys.stdin.read(1)\n", 
                "normalized_code_snippet": "sys.stdin.read(1)"
            }
        ]
    }, 
    {
        "question_id": 1450393, 
        "title": "How do you read from stdin in Python?", 
        "annotations": [
            {
                "intent": "read from stdin", 
                "context": "import fileinput\n\n", 
                "normalized_context": "import fileinput", 
                "code_snippet": "\n\nfor line in fileinput.input():\n    pass\n", 
                "normalized_code_snippet": "for line in fileinput.input():\n    pass"
            }, 
            {
                "intent": "read from stdin", 
                "context": "import sys\n\n", 
                "normalized_context": "import sys", 
                "code_snippet": "\n\nfor line in sys.stdin:\n    print line\n", 
                "normalized_code_snippet": "for line in sys.stdin:\n    pass"
            }
        ]
    }, 
    {
        "question_id": 2759067, 
        "title": "Rename Files in Python", 
        "annotations": [
            {
                "intent": "Rename Files", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.rename(src, dst)", 
                "normalized_code_snippet": "os.rename(src, dst)"
            }
        ]
    }, 
    {
        "question_id": 15411107, 
        "title": "Delete a dictionary item if the key exists", 
        "annotations": [
            {
                "intent": "Delete a dictionary item if the key exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " mydict.pop(\"key\", None)\n", 
                "normalized_code_snippet": "mydict.pop('key', None)"
            }, 
            {
                "intent": "Delete a dictionary item if the key exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    del mydict[key]\n", 
                "normalized_code_snippet": "del mydict[key]"
            }, 
            {
                "intent": "Delete a dictionary item if the key exists", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\n\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass\n", 
                "normalized_code_snippet": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass"
            }
        ]
    }, 
    {
        "question_id": 466345, 
        "title": "Converting string into datetime", 
        "annotations": [
            {
                "intent": "Converting string into datetime", 
                "context": "from datetime import datetime\n\n", 
                "normalized_context": "from datetime import datetime", 
                "code_snippet": " datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n", 
                "normalized_code_snippet": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
            }, 
            {
                "intent": "Converting string into datetime", 
                "context": "from dateutil import parser\n", 
                "normalized_context": "from dateutil import parser", 
                "code_snippet": " parser.parse(\"Aug 28 1999 12:00AM\")\n", 
                "normalized_code_snippet": "parser.parse('Aug 28 1999 12:00AM')"
            }
        ]
    }, 
    {
        "question_id": 13368659, 
        "title": "How can I loop through an IP address range in python", 
        "annotations": [
            {
                "intent": "loop through an IP address range", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for i in range(256):\n    for j in range(256):\n        ip = \"192.168.%d.%d\" % (i, j)\n        print ip\n", 
                "normalized_code_snippet": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print ip"
            }, 
            {
                "intent": "loop through an IP address range", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for i,j in product(range(256),range(256)):\n    print \"192.168.{0}.{1}\".format(i,j)\n", 
                "normalized_code_snippet": "for (i, j) in product(range(256), range(256)):\n    pass"
            }, 
            {
                "intent": "loop through an IP address range", 
                "context": "from netaddr import iter_iprange\n", 
                "normalized_context": "from netaddr import iter_iprange", 
                "code_snippet": "\ngenerator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)\n", 
                "normalized_code_snippet": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"
            }
        ]
    }, 
    {
        "question_id": 10973614, 
        "title": "Convert JSON array to Python list", 
        "annotations": [
            {
                "intent": "Convert JSON array to Python list", 
                "context": "import json\n\n\n\n\narray = '{\"fruits\": [\"apple\", \"banana\", \"orange\"]}'\n", 
                "normalized_context": "import json\narray = '{\"fruits\": [\"apple\", \"banana\", \"orange\"]}'", 
                "code_snippet": "\ndata  = json.loads(array)\n", 
                "normalized_code_snippet": "data = json.loads(array)"
            }, 
            {
                "intent": "Convert JSON array to Python list", 
                "context": "\nimport json\narray = '{\"fruits\": [\"apple\", \"banana\", \"orange\"]}'\n", 
                "normalized_context": "import json\narray = '{\"fruits\": [\"apple\", \"banana\", \"orange\"]}'", 
                "code_snippet": "\ndata  = json.loads(array)\n", 
                "normalized_code_snippet": "data = json.loads(array)"
            }
        ]
    }, 
    {
        "question_id": 4135344, 
        "title": "Is there any direct way to generate pdf from markdown file by python", 
        "annotations": [
            {
                "intent": "generate pdf from markdown file", 
                "context": "from markdown import markdown\nimport pdfkit\n\ninput_filename = 'README.md'\noutput_filename = 'README.pdf'\n\n", 
                "normalized_context": "from markdown import markdown\nimport pdfkit\ninput_filename = 'README.md'\noutput_filename = 'README.pdf'", 
                "code_snippet": "\n\nwith open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\n\npdfkit.from_string(html_text, output_filename)\n", 
                "normalized_code_snippet": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)"
            }
        ]
    }, 
    {
        "question_id": 8177079, 
        "title": "Python: take the content of a list and append it to another list", 
        "annotations": [
            {
                "intent": "take the content of a list and append it to another list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "list2.extend(list1)\n", 
                "normalized_code_snippet": "list2.extend(list1)"
            }, 
            {
                "intent": "take the content of a list and append it to another list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "list1.extend(mylog)\n", 
                "normalized_code_snippet": "list1.extend(mylog)"
            }, 
            {
                "intent": "take the content of a list and append it to another list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " c.extend(a)\n", 
                "normalized_code_snippet": "c.extend(a)"
            }, 
            {
                "intent": "take the content of a list and append it to another list", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for line in mylog:\n    list1.append(line)\n", 
                "normalized_code_snippet": "for line in mylog:\n    list1.append(line)"
            }
        ]
    }, 
    {
        "question_id": 455612, 
        "title": "Limiting floats to two decimal points", 
        "annotations": [
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print(\"%.2f\" % a)\n  ", 
                "normalized_code_snippet": "print(('%.2f' % a))"
            }, 
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print(\"{0:.2f}\".format(a))\n  ", 
                "normalized_code_snippet": "print('{0:.2f}'.format(a))"
            }, 
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print(\"{0:.2f}\".format(round(a,2)))\n  ", 
                "normalized_code_snippet": "print('{0:.2f}'.format(round(a, 2)))"
            }, 
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " print(\"%.2f\" % round(a,2))\n  ", 
                "normalized_code_snippet": "print(('%.2f' % round(a, 2)))"
            }, 
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " \"%.2f\" % 13.9499999\n", 
                "normalized_code_snippet": "('%.2f' % 13.9499999)"
            }, 
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " \"%.2f\" % 3.14159\n", 
                "normalized_code_snippet": "('%.2f' % 3.14159)"
            }, 
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "float(\"{0:.2f}\".format(13.949999999999999))\n", 
                "normalized_code_snippet": "float('{0:.2f}'.format(13.95))"
            }, 
            {
                "intent": "Limiting floats to two decimal points", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\"{0:.2f}\".format(13.949999999999999)\n", 
                "normalized_code_snippet": "'{0:.2f}'.format(13.95)"
            }
        ]
    }, 
    {
        "question_id": 73663, 
        "title": "Terminating a Python script", 
        "annotations": [
            {
                "intent": "Terminating a Python script", 
                "context": "import sys\n", 
                "normalized_context": "import sys", 
                "code_snippet": "\nsys.exit()\n", 
                "normalized_code_snippet": "sys.exit()"
            }, 
            {
                "intent": "Terminating a Python script", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n  quit()\n", 
                "normalized_code_snippet": "quit()"
            }, 
            {
                "intent": "Terminating a Python script", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "sys.exit(\"some error message\")", 
                "normalized_code_snippet": "sys.exit('some error message')"
            }
        ]
    }, 
    {
        "question_id": 319426, 
        "title": "How do I do a case insensitive string comparison in Python?", 
        "annotations": [
            {
                "intent": "case insensitive string comparison", 
                "context": "string1 = 'Hello'\nstring2 = 'hello'\n\n", 
                "normalized_context": "string1 = 'Hello'\nstring2 = 'hello'", 
                "code_snippet": "\n\nif string1.lower() == string2.lower():\n    print \"The strings are the same (case insensitive)\"\nelse:\n    print \"The strings are not the same (case insensitive)\"\n", 
                "normalized_code_snippet": "if (string1.lower() == string2.lower()):\n    print 'The strings are the same (case insensitive)'\nelse:\n    print 'The strings are not the same (case insensitive)'"
            }, 
            {
                "intent": "case insensitive string comparison", 
                "context": "string1 = 'Hello'\nstring2 = 'hello'\n\n", 
                "normalized_context": "string1 = 'Hello'\nstring2 = 'hello'", 
                "code_snippet": "\n\nif string1.lower() == string2.lower():\n    ", 
                "normalized_code_snippet": "if (string1.lower() == string2.lower()):\n    pass"
            }, 
            {
                "intent": "case insensitive string comparison", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "string1.lower() == string2.lower()\n", 
                "normalized_code_snippet": "(string1.lower() == string2.lower())"
            }, 
            {
                "intent": "case insensitive string comparison", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " first.lower() == second.lower()\n", 
                "normalized_code_snippet": "(first.lower() == second.lower())"
            }, 
            {
                "intent": "case insensitive string comparison", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " first.upper() == second.upper()\n", 
                "normalized_code_snippet": "(first.upper() == second.upper())"
            }
        ]
    }, 
    {
        "question_id": 1476, 
        "title": "How do you express binary literals in Python?", 
        "annotations": [
            {
                "intent": "express binary literals", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "bin(173)", 
                "normalized_code_snippet": "bin(173)"
            }, 
            {
                "intent": "express binary literals", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int('01010101111',2)\n", 
                "normalized_code_snippet": "int('01010101111', 2)"
            }, 
            {
                "intent": "express binary literals", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int('010101', 2)\n", 
                "normalized_code_snippet": "int('010101', 2)"
            }, 
            {
                "intent": "express binary literals", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int('0b0010101010', 2)\n", 
                "normalized_code_snippet": "int('0b0010101010', 2)"
            }, 
            {
                "intent": "express binary literals", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " bin(21)\n", 
                "normalized_code_snippet": "bin(21)"
            }, 
            {
                "intent": "express binary literals", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " int('11111111',2)\n", 
                "normalized_code_snippet": "int('11111111', 2)"
            }
        ]
    }, 
    {
        "question_id": 42950, 
        "title": "Get Last Day of the Month in Python", 
        "annotations": [
            {
                "intent": "Get Last Day of the Month", 
                "context": " import calendar\n", 
                "normalized_context": "import calendar", 
                "code_snippet": " calendar.monthrange(2002,1)\n", 
                "normalized_code_snippet": "calendar.monthrange(2002, 1)"
            }, 
            {
                "intent": "Get Last Day of the Month", 
                "context": " import calendar\n", 
                "normalized_context": "import calendar", 
                "code_snippet": " calendar.monthrange(2008,2)\n", 
                "normalized_code_snippet": "calendar.monthrange(2008, 2)"
            }, 
            {
                "intent": "Get Last Day of the Month", 
                "context": " import calendar\n", 
                "normalized_context": "import calendar", 
                "code_snippet": " calendar.monthrange(2100,2)\n", 
                "normalized_code_snippet": "calendar.monthrange(2100, 2)"
            }, 
            {
                "intent": "Get Last Day of the Month", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "calendar.monthrange(year, month)[1]\n", 
                "normalized_code_snippet": "calendar.monthrange(year, month)[1]"
            }, 
            {
                "intent": "Get Last Day of the Month", 
                "context": ">>> from calendar import monthrange\n", 
                "normalized_context": "from calendar import monthrange", 
                "code_snippet": "\n>>> monthrange(2012, 2)\n", 
                "normalized_code_snippet": "monthrange(2012, 2)"
            }, 
            {
                "intent": "Get Last Day of the Month", 
                "context": ">>> import datetime\n", 
                "normalized_context": "import datetime", 
                "code_snippet": "\n>>> datetime.date (2000, 2, 1) - datetime.timedelta (days = 1)\n", 
                "normalized_code_snippet": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))"
            }
        ]
    }, 
    {
        "question_id": 761804, 
        "title": "Trimming a string in Python", 
        "annotations": [
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " ' Hello '.strip()\n", 
                "normalized_code_snippet": "' Hello '.strip()"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "myString.strip()\n", 
                "normalized_code_snippet": "myString.strip()"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " ' Hello '.strip()\n", 
                "normalized_code_snippet": "' Hello '.strip()"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " ' Hello'.strip()\n", 
                "normalized_code_snippet": "' Hello'.strip()"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " 'Bob has a cat'.strip()\n", 
                "normalized_code_snippet": "'Bob has a cat'.strip()"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " '          Hello        '.strip()  ", 
                "normalized_code_snippet": "'          Hello        '.strip()"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "str.strip()", 
                "normalized_code_snippet": "str.strip()"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "myString.strip('\\n')", 
                "normalized_code_snippet": "myString.strip('\\n')"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "myString.lstrip('\\n\\r')", 
                "normalized_code_snippet": "myString.lstrip('\\n\\r')"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "myString.rstrip('\\n\\t')", 
                "normalized_code_snippet": "myString.rstrip('\\n\\t')"
            }, 
            {
                "intent": "Trimming a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": " \"  Hello\\n\".strip(\" \")\n", 
                "normalized_code_snippet": "'  Hello\\n'.strip(' ')"
            }
        ]
    }, 
    {
        "question_id": 4476373, 
        "title": "Simple URL GET/POST function in Python", 
        "annotations": [
            {
                "intent": "Simple URL GET/POST function", 
                "context": "import requests\n", 
                "normalized_context": "import requests", 
                "code_snippet": "\nr = requests.get(url)\n\n", 
                "normalized_code_snippet": "r = requests.get(url)"
            }, 
            {
                "intent": "Simple URL GET/POST function", 
                "context": "import requests\n\n\npayload = {'key1': 'value1', 'key2': 'value2'}\n\n", 
                "normalized_context": "import requests\npayload = {'key1': 'value1', 'key2': 'value2', }", 
                "code_snippet": "\nr = requests.get(url, params=payload)\n\n", 
                "normalized_code_snippet": "r = requests.get(url, params=payload)"
            }, 
            {
                "intent": "Simple URL GET/POST function", 
                "context": "import requests\nurl = 'https://...'\npayload = {'key1': 'value1', 'key2': 'value2'}\n\n", 
                "normalized_context": "import requests\nurl = 'https://...'\npayload = {'key1': 'value1', 'key2': 'value2', }", 
                "code_snippet": "\nr = requests.post(url, data=payload)\n\n", 
                "normalized_code_snippet": "r = requests.post(url, data=payload)"
            }, 
            {
                "intent": "Simple URL GET/POST", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\npost_response = requests.post(url='http://httpbin.org/post', json=post_data)\n", 
                "normalized_code_snippet": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"
            }
        ]
    }, 
    {
        "question_id": 247770, 
        "title": "Retrieving python module path", 
        "annotations": [
            {
                "intent": "Retrieving python module path", 
                "context": "import a_module\n", 
                "normalized_context": "import a_module", 
                "code_snippet": "\nprint a_module.__file__\n", 
                "normalized_code_snippet": "print a_module.__file__"
            }, 
            {
                "intent": "Retrieving python module path", 
                "context": "\nimport os\n", 
                "normalized_context": "import os", 
                "code_snippet": "\nprint os.getcwd()\n", 
                "normalized_code_snippet": "print os.getcwd()"
            }, 
            {
                "intent": "Retrieving python module path", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "path = os.path.abspath(amodule.__file__)\n", 
                "normalized_code_snippet": "path = os.path.abspath(amodule.__file__)"
            }
        ]
    }, 
    {
        "question_id": 4906977, 
        "title": "Access environment variables from Python", 
        "annotations": [
            {
                "intent": "Access environment variables", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": " os.environ['HOME']\n", 
                "normalized_code_snippet": "os.environ['HOME']"
            }, 
            {
                "intent": "Access environment variables", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": " os.environ['HOME']\n", 
                "normalized_code_snippet": "os.environ['HOME']"
            }, 
            {
                "intent": "Access environment variables", 
                "context": "import os\n", 
                "normalized_context": "import os", 
                "code_snippet": "\nprint os.environ\n", 
                "normalized_code_snippet": "print os.environ"
            }, 
            {
                "intent": "Access environment variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "os.environ\n", 
                "normalized_code_snippet": "os.environ"
            }, 
            {
                "intent": "Access environment variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nprint os.environ.get('KEY_THAT_MIGHT_EXIST')\n\n", 
                "normalized_code_snippet": "print os.environ.get('KEY_THAT_MIGHT_EXIST')"
            }, 
            {
                "intent": "Access environment variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\nprint os.getenv('KEY_THAT_MIGHT_EXIST', default_value)\n", 
                "normalized_code_snippet": "print os.getenv('KEY_THAT_MIGHT_EXIST', default_value)"
            }, 
            {
                "intent": "Access environment variables", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "print os.environ.get('HOME','/home/username/')\n", 
                "normalized_code_snippet": "print os.environ.get('HOME', '/home/username/')"
            }
        ]
    }, 
    {
        "question_id": 1186789, 
        "title": "What is the best way to call a Python script from another Python script?", 
        "annotations": [
            {
                "intent": "call a Python script from another Python script", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "execfile(\"test2.py\")\n", 
                "normalized_code_snippet": "execfile('test2.py')"
            }, 
            {
                "intent": "call a Python script from another Python script", 
                "context": "import subprocess\n\n", 
                "normalized_context": "import subprocess", 
                "code_snippet": "\n\nsubprocess.call(\"test1.py\", shell=True)\n", 
                "normalized_code_snippet": "subprocess.call('test1.py', shell=True)"
            }
        ]
    }, 
    {
        "question_id": 2407398, 
        "title": "How to merge lists into a list of tuples in Python?", 
        "annotations": [
            {
                "intent": "merge lists into a list of tuples", 
                "context": " list_a = [1, 2, 3, 4]\n\n list_b = [5, 6, 7, 8]\n", 
                "normalized_context": "list_a = [1, 2, 3, 4]\nlist_b = [5, 6, 7, 8]", 
                "code_snippet": " zip(list_a, list_b)\n", 
                "normalized_code_snippet": "zip(list_a, list_b)"
            }, 
            {
                "intent": "merge lists into a list of tuples", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "list(zip(a, b))", 
                "normalized_code_snippet": "list(zip(a, b))"
            }
        ]
    }, 
    {
        "question_id": 364519, 
        "title": "In Python, how do I iterate over a dictionary in sorted order?", 
        "annotations": [
            {
                "intent": "iterate over a dictionary in sorted order", 
                "context": " d = {\"x\":2, \"h\":15, \"a\":2222}\n", 
                "normalized_context": "d = {'x': 2, 'h': 15, 'a': 2222, }", 
                "code_snippet": " it = iter(sorted(d.iteritems()))\n", 
                "normalized_code_snippet": "it = iter(sorted(d.iteritems()))"
            }, 
            {
                "intent": "iterate over a dictionary in sorted order", 
                "context": " d = {\"x\":2, \"h\":15, \"a\":2222}\n", 
                "normalized_context": "d = {'x': 2, 'h': 15, 'a': 2222, }", 
                "code_snippet": "\n>>> for key, value in sorted(d.iteritems()):\n>>>     print(key, value)\n", 
                "normalized_code_snippet": "for (key, value) in sorted(d.iteritems()):\n    pass"
            }, 
            {
                "intent": "iterate over a dictionary in sorted order", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "return sorted(dict.iteritems())\n", 
                "normalized_code_snippet": "return sorted(dict.iteritems())"
            }, 
            {
                "intent": "iterate over a dictionary in sorted order", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "return iter(sorted(dict.iteritems()))\n", 
                "normalized_code_snippet": "return iter(sorted(dict.iteritems()))"
            }, 
            {
                "intent": "iterate over a dictionary in sorted order", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for k,v in sorted(foo.items()):\n    print k, v\n", 
                "normalized_code_snippet": "for (k, v) in sorted(foo.items()):\n    pass"
            }, 
            {
                "intent": "iterate over a dictionary in sorted order", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "for k in sorted(foo.keys()):\n    print k, foo[k]\n", 
                "normalized_code_snippet": "for k in sorted(foo.keys()):\n    pass"
            }
        ]
    }, 
    {
        "question_id": 1038824, 
        "title": "How do I remove a substring from the end of a string in Python?", 
        "annotations": [
            {
                "intent": "remove a substring from the end of a string", 
                "context": "url = 'abcdc.com'\n", 
                "normalized_context": "url = 'abcdc.com'", 
                "code_snippet": "\nif url.endswith('.com'):\n    url = url[:-4]\n", 
                "normalized_code_snippet": "if url.endswith('.com'):\n    url = url[:(-4)]"
            }, 
            {
                "intent": "remove a substring from the end of a string", 
                "context": "import re\nurl = 'abcdc.com'\n", 
                "normalized_context": "import re\nurl = 'abcdc.com'", 
                "code_snippet": "\nurl = re.sub('\\.com$', '', url)\n", 
                "normalized_code_snippet": "url = re.sub('\\\\.com$', '', url)"
            }, 
            {
                "intent": "remove a substring from the end of a string", 
                "context": "url = 'abcdc.com'\n", 
                "normalized_context": "url = 'abcdc.com'", 
                "code_snippet": "\nprint url.replace('.com','')\n", 
                "normalized_code_snippet": "print url.replace('.com', '')"
            }, 
            {
                "intent": "remove a substring from the end of a string", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    if not text.endswith(suffix):\n        return text\n    return text[:len(text)-len(suffix)]\n", 
                "normalized_code_snippet": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]"
            }
        ]
    }, 
    {
        "question_id": 19602931, 
        "title": "Basic http file downloading and saving to disk in python?", 
        "annotations": [
            {
                "intent": "http file downloading and saving", 
                "context": "import urllib\n\n", 
                "normalized_context": "import urllib", 
                "code_snippet": "\n\ntestfile = urllib.URLopener()\ntestfile.retrieve(\"http://randomsite.com/file.gz\", \"file.gz\")\n", 
                "normalized_code_snippet": "testfile = urllib.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"
            }, 
            {
                "intent": "http file downloading and saving", 
                "context": "import urllib\n", 
                "normalized_context": "import urllib", 
                "code_snippet": "\nurllib.urlretrieve (\"http://randomsite.com/file.gz\", \"file.gz\")\n", 
                "normalized_code_snippet": "urllib.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"
            }, 
            {
                "intent": "http file downloading and saving", 
                "context": "import wget\n\n\n\n\nfile_url = 'http://johndoe.com/download.zip'\n\n", 
                "normalized_context": "import wget\nfile_url = 'http://johndoe.com/download.zip'", 
                "code_snippet": "\n\nfile_name = wget.download(file_url)\n", 
                "normalized_code_snippet": "file_name = wget.download(file_url)"
            }
        ]
    }, 
    {
        "question_id": 4588628, 
        "title": "Find indices of elements equal to zero from numpy array", 
        "annotations": [
            {
                "intent": "Find indices of elements equal to zero from numpy array", 
                "context": " x = numpy.array([1,0,2,0,3,0,4,5,6,7,8])\n", 
                "normalized_context": "x = numpy.array([1, 0, 2, 0, 3, 0, 4, 5, 6, 7, 8])", 
                "code_snippet": " numpy.where(x == 0)[0]\n", 
                "normalized_code_snippet": "numpy.where((x == 0))[0]"
            }
        ]
    }, 
    {
        "question_id": 16387069, 
        "title": "Open images? Python", 
        "annotations": [
            {
                "intent": "Open images", 
                "context": "from PIL import Image\n\n", 
                "normalized_context": "from PIL import Image", 
                "code_snippet": "\n\nimg = Image.open('picture.jpg')\nimg.show()\n", 
                "normalized_code_snippet": "img = Image.open('picture.jpg')\nimg.show()"
            }, 
            {
                "intent": "Open images", 
                "context": "", 
                "normalized_context": "", 
                "code_snippet": "\n    img = Image.open(\"picture.jpg\")\n    Img.show\n", 
                "normalized_code_snippet": "img = Image.open('picture.jpg')\nImg.show"
            }
        ]
    }
]